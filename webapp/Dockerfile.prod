# webapp/Dockerfile.prod
# Multi-stage build for Vue/Quasar production deployment
# Comments in English only

# Build stage - Compile Vue/Quasar application
FROM node:20 AS build
WORKDIR /app

# Copy package files for better layer caching
COPY package.json yarn.lock ./
RUN yarn install --frozen-lockfile --prefer-offline

# Copy source code
COPY . ./

# Build arguments for environment configuration
ARG ENVIRONMENT=production
ARG API_URL=https://api.livrolog.com
ARG FRONTEND_URL=https://livrolog.com
ARG GOOGLE_CLIENT_ID
ARG APP_NAME=LivroLog

# Create environment file and build
RUN if [ "$ENVIRONMENT" = "production" ]; then \
      echo "VITE_API_URL=${API_URL}" > .env.production && \
      echo "VITE_FRONTEND_URL=${FRONTEND_URL}" >> .env.production && \
      echo "VITE_GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}" >> .env.production && \
      echo "VITE_APP_NAME=${APP_NAME}" >> .env.production && \
      yarn build --mode production; \
    else \
      echo "VITE_API_URL=${API_URL}" > .env.development && \
      echo "VITE_FRONTEND_URL=${FRONTEND_URL}" >> .env.development && \
      echo "VITE_GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}" >> .env.development && \
      echo "VITE_APP_NAME=${APP_NAME}" >> .env.development && \
      yarn build --mode development; \
    fi

# Production stage - Serve with Nginx
FROM nginx:stable-alpine AS production

# Copy built application
COPY --from=build /app/dist/ /usr/share/nginx/html/

# Copy custom nginx configuration
COPY docker/nginx.conf /etc/nginx/conf.d/default.conf

# Install curl for healthcheck
RUN apk add --no-cache curl

# Ensure nginx user owns content
RUN chown -R nginx:nginx /usr/share/nginx/html

# Expose HTTP port
EXPOSE 80

# Health check for service availability
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=10 \
    CMD curl -fsS http://localhost/healthz || exit 1

# Start nginx
CMD ["nginx", "-g", "daemon off;"]