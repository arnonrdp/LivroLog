{
    "openapi": "3.0.0",
    "info": {
        "title": "LivroLog API",
        "description": "Personal library management system with Google Books API integration, social features, privacy controls, and comprehensive follow system with request management",
        "contact": {
            "email": "support@livrolog.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "1.0.0"
    },
    "servers": [
        {
            "url": "{scheme}://{host}",
            "description": "LivroLog API Server",
            "variables": {
                "scheme": {
                    "enum": [
                        "https",
                        "http"
                    ],
                    "default": "https"
                },
                "host": {
                    "default": "api.dev.livrolog.com"
                }
            }
        },
        {
            "url": "http://localhost:8000",
            "description": "Local Development Server"
        }
    ],
    "paths": {
        "/auth/register": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Register new user",
                "description": "Creates a new user account and returns access token",
                "operationId": "registerUser",
                "requestBody": {
                    "description": "User data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "display_name",
                                    "email",
                                    "username",
                                    "password"
                                ],
                                "properties": {
                                    "display_name": {
                                        "description": "User display name",
                                        "type": "string",
                                        "example": "John Doe"
                                    },
                                    "email": {
                                        "description": "User email",
                                        "type": "string",
                                        "format": "email",
                                        "example": "john@example.com"
                                    },
                                    "username": {
                                        "description": "Unique username",
                                        "type": "string",
                                        "example": "john_doe"
                                    },
                                    "password": {
                                        "description": "Password (minimum 8 characters)",
                                        "type": "string",
                                        "format": "password",
                                        "example": "password123"
                                    },
                                    "shelf_name": {
                                        "description": "Shelf name (optional)",
                                        "type": "string",
                                        "example": "John's Library"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "User registered successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "user": {
                                            "$ref": "#/components/schemas/User"
                                        },
                                        "access_token": {
                                            "type": "string",
                                            "example": "1|aBcDeF123456..."
                                        },
                                        "token_type": {
                                            "type": "string",
                                            "example": "Bearer"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "User login",
                "description": "Authenticates user and returns access token",
                "operationId": "loginUser",
                "requestBody": {
                    "description": "Login credentials",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "email",
                                    "password"
                                ],
                                "properties": {
                                    "email": {
                                        "description": "User email",
                                        "type": "string",
                                        "format": "email",
                                        "example": "john@example.com"
                                    },
                                    "password": {
                                        "description": "User password",
                                        "type": "string",
                                        "format": "password",
                                        "example": "password123"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "user": {
                                            "$ref": "#/components/schemas/User"
                                        },
                                        "access_token": {
                                            "type": "string",
                                            "example": "1|aBcDeF123456..."
                                        },
                                        "token_type": {
                                            "type": "string",
                                            "example": "Bearer"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Invalid credentials",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/auth/logout": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "User logout",
                "description": "Invalidates the current access token",
                "operationId": "logoutUser",
                "responses": {
                    "200": {
                        "description": "Logout successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Logged out successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/auth/me": {
            "get": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Get current user",
                "description": "Returns the authenticated user information",
                "operationId": "getCurrentUser",
                "responses": {
                    "200": {
                        "description": "User information",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Update user profile and account",
                "description": "Updates the authenticated user's profile and account information",
                "operationId": "updateUserProfile",
                "requestBody": {
                    "description": "Profile and account data to update",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "display_name": {
                                        "description": "User display name",
                                        "type": "string",
                                        "example": "John Doe"
                                    },
                                    "username": {
                                        "description": "Unique username",
                                        "type": "string",
                                        "example": "john_doe"
                                    },
                                    "email": {
                                        "description": "User email",
                                        "type": "string",
                                        "format": "email",
                                        "example": "john@example.com"
                                    },
                                    "shelf_name": {
                                        "description": "Custom shelf name",
                                        "type": "string",
                                        "example": "John's Library"
                                    },
                                    "locale": {
                                        "description": "User preferred language",
                                        "type": "string",
                                        "example": "en"
                                    },
                                    "is_private": {
                                        "description": "Whether profile is private",
                                        "type": "boolean",
                                        "example": false
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Profile updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Profile updated successfully"
                                        },
                                        "user": {
                                            "$ref": "#/components/schemas/User"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Delete user account",
                "description": "Permanently deletes the authenticated user's account and all associated data",
                "operationId": "deleteUserAccount",
                "responses": {
                    "200": {
                        "description": "Account deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Account deleted successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/password": {
            "put": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Update user password",
                "description": "Updates the authenticated user's password",
                "operationId": "updatePassword",
                "requestBody": {
                    "description": "Password update data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "current_password",
                                    "password",
                                    "password_confirmation"
                                ],
                                "properties": {
                                    "current_password": {
                                        "description": "Current password",
                                        "type": "string",
                                        "format": "password"
                                    },
                                    "password": {
                                        "description": "New password",
                                        "type": "string",
                                        "format": "password"
                                    },
                                    "password_confirmation": {
                                        "description": "New password confirmation",
                                        "type": "string",
                                        "format": "password"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Password updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Password updated successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/auth/forgot-password": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Send password reset link",
                "description": "Sends a password reset link to the user's email",
                "operationId": "forgotPassword",
                "requestBody": {
                    "description": "Email address",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "email"
                                ],
                                "properties": {
                                    "email": {
                                        "description": "User email",
                                        "type": "string",
                                        "format": "email",
                                        "example": "john@example.com"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Password reset link sent",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Password reset link sent successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Error sending password reset link",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unable to send password reset link."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/auth/reset-password": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Reset user password",
                "description": "Resets the user's password using the token received via email",
                "operationId": "resetPassword",
                "requestBody": {
                    "description": "Password reset data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "token",
                                    "email",
                                    "password",
                                    "password_confirmation"
                                ],
                                "properties": {
                                    "token": {
                                        "description": "Password reset token",
                                        "type": "string"
                                    },
                                    "email": {
                                        "description": "User email",
                                        "type": "string",
                                        "format": "email",
                                        "example": "john@example.com"
                                    },
                                    "password": {
                                        "description": "New password",
                                        "type": "string",
                                        "format": "password"
                                    },
                                    "password_confirmation": {
                                        "description": "New password confirmation",
                                        "type": "string",
                                        "format": "password"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Password reset successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Password reset successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Error resetting password",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unable to reset password."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/auth/google": {
            "get": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Redirect to Google OAuth",
                "description": "Redirects user to Google for OAuth authentication",
                "operationId": "googleRedirect",
                "responses": {
                    "302": {
                        "description": "Redirect to Google OAuth URL"
                    }
                }
            },
            "put": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Connect Google account to existing user",
                "description": "Connects a Google account to the authenticated user's account",
                "operationId": "connectGoogleAccount",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "id_token",
                                    "action"
                                ],
                                "properties": {
                                    "id_token": {
                                        "description": "Google ID token",
                                        "type": "string"
                                    },
                                    "action": {
                                        "description": "Action to perform",
                                        "type": "string",
                                        "enum": [
                                            "connect",
                                            "update_email"
                                        ]
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Google account connected successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Google account connected successfully"
                                        },
                                        "user": {
                                            "$ref": "#/components/schemas/User"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "409": {
                        "description": "Google account already connected to another user"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Google Sign In with ID Token",
                "description": "Authenticates user using Google ID Token for frontend integration",
                "operationId": "googleSignIn",
                "requestBody": {
                    "description": "Google ID Token",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "id_token"
                                ],
                                "properties": {
                                    "id_token": {
                                        "description": "Google ID Token from frontend",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Authentication successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "user": {
                                            "$ref": "#/components/schemas/User"
                                        },
                                        "access_token": {
                                            "type": "string"
                                        },
                                        "token_type": {
                                            "type": "string",
                                            "example": "Bearer"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Invalid Google ID Token"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Disconnect Google account",
                "description": "Removes Google account connection from the authenticated user",
                "operationId": "disconnectGoogle",
                "responses": {
                    "200": {
                        "description": "Google account disconnected successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Google account disconnected successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Cannot disconnect without password",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Please set a password before disconnecting Google account"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/auth/google/callback": {
            "get": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Google OAuth callback",
                "description": "Handles Google OAuth callback and creates/authenticates user",
                "operationId": "googleCallback",
                "parameters": [
                    {
                        "name": "code",
                        "in": "query",
                        "description": "Authorization code from Google",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Authentication successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "user": {
                                            "$ref": "#/components/schemas/User"
                                        },
                                        "access_token": {
                                            "type": "string"
                                        },
                                        "token_type": {
                                            "type": "string",
                                            "example": "Bearer"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "OAuth error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "OAuth authentication failed"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/auth/check-username": {
            "get": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Check username availability",
                "description": "Checks if a username is available for registration or update",
                "operationId": "checkUsernameAvailability",
                "parameters": [
                    {
                        "name": "username",
                        "in": "query",
                        "description": "Username to check",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "john_doe"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Username availability status",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "exists": {
                                            "description": "Whether username already exists",
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "available": {
                                            "description": "Whether username is available for use",
                                            "type": "boolean",
                                            "example": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/authors/merge": {
            "post": {
                "tags": [
                    "Authors"
                ],
                "summary": "Merge two duplicate authors into one",
                "description": "Moves all books from the source author to the target author and deletes the duplicate author. **Admin access required.**",
                "operationId": "60ea6c60ea185c87b8dedeceb6eb6983",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "from_author_id",
                                    "to_author_id"
                                ],
                                "properties": {
                                    "from_author_id": {
                                        "description": "ID of the duplicate author to be merged (will be deleted)",
                                        "type": "string",
                                        "example": "A-9IO8-3D6Y"
                                    },
                                    "to_author_id": {
                                        "description": "ID of the main author to keep",
                                        "type": "string",
                                        "example": "A-1ABC-2DEF"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Authors merged successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Authors merged successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Access denied. Admin privileges required."
                    },
                    "422": {
                        "description": "Invalid data"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/books": {
            "get": {
                "tags": [
                    "Books"
                ],
                "summary": "List books, search external APIs, or get showcase",
                "description": "Returns books from global catalog, external search results, or featured books based on parameters",
                "operationId": "getBooks",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Items per page (max 100 for catalog, max 40 for search)",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "example": 20
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Search term for external APIs (Google Books, Open Library)",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "example": "Sidarta"
                        }
                    },
                    {
                        "name": "sort_by",
                        "in": "query",
                        "description": "Sort order for catalog results (not applicable for search)",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "recent",
                                "rating",
                                "popular"
                            ],
                            "example": "recent"
                        }
                    },
                    {
                        "name": "with",
                        "in": "query",
                        "description": "Include additional fields in response (comma-separated)",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "example": "details,users,reviews"
                        }
                    },
                    {
                        "name": "showcase",
                        "in": "query",
                        "description": "Return featured books (most popular)",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "example": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Books list (catalog/search results/showcase)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Book"
                                            }
                                        },
                                        "meta": {
                                            "properties": {
                                                "current_page": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "from": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "last_page": {
                                                    "type": "integer",
                                                    "example": 5
                                                },
                                                "per_page": {
                                                    "type": "integer",
                                                    "example": 20
                                                },
                                                "to": {
                                                    "type": "integer",
                                                    "example": 20
                                                },
                                                "total": {
                                                    "type": "integer",
                                                    "example": 100
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Books"
                ],
                "summary": "Create new book in global catalog",
                "description": "Creates a new book in the global books table. This is for administrative purposes and does not add the book to any user's library. Use POST /user/books to add books to personal libraries.",
                "operationId": "storeBook",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "google_id": {
                                        "description": "Google Books ID for enrichment",
                                        "type": "string",
                                        "example": "iO5pApw2JycC"
                                    },
                                    "title": {
                                        "type": "string",
                                        "example": "The Ivory Tower and Harry Potter"
                                    },
                                    "authors": {
                                        "type": "string",
                                        "example": "Lana A. Whited"
                                    },
                                    "isbn": {
                                        "type": "string",
                                        "example": "0826215491"
                                    },
                                    "thumbnail": {
                                        "type": "string",
                                        "format": "url"
                                    },
                                    "description": {
                                        "type": "string"
                                    },
                                    "publisher": {
                                        "type": "string",
                                        "example": "University of Missouri Press"
                                    },
                                    "language": {
                                        "type": "string",
                                        "example": "en"
                                    },
                                    "published_date": {
                                        "type": "string",
                                        "format": "date"
                                    },
                                    "page_count": {
                                        "type": "integer",
                                        "example": 324
                                    },
                                    "format": {
                                        "type": "string",
                                        "enum": [
                                            "hardcover",
                                            "paperback",
                                            "ebook",
                                            "audiobook"
                                        ]
                                    },
                                    "categories": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "edition": {
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Book created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "book": {
                                            "$ref": "#/components/schemas/Book"
                                        },
                                        "enriched": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Book created in global catalog"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Book already exists",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "book": {
                                            "$ref": "#/components/schemas/Book"
                                        },
                                        "enriched": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Book already exists in global catalog"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/books/{id}": {
            "get": {
                "tags": [
                    "Books"
                ],
                "summary": "Get book by ID with contextual data",
                "description": "Returns detailed information about a specific book with optional user-specific data using with[] pattern",
                "operationId": "getBook",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Book ID",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "B-1ABC-2DEF"
                        }
                    },
                    {
                        "name": "with[]",
                        "in": "query",
                        "description": "Include additional data: pivot (user library data), reviews, details",
                        "required": false,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "pivot",
                                    "reviews",
                                    "details"
                                ]
                            }
                        }
                    },
                    {
                        "name": "user_id",
                        "in": "query",
                        "description": "User ID to get pivot data for (used with with[]=pivot)",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "example": "U-1ABC-2DEF"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Book information with contextual data",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "$ref": "#/components/schemas/Book"
                                        },
                                        {
                                            "properties": {
                                                "pivot": {
                                                    "properties": {
                                                        "added_at": {
                                                            "type": "string",
                                                            "format": "date-time"
                                                        },
                                                        "read_at": {
                                                            "type": "string",
                                                            "format": "date",
                                                            "nullable": true
                                                        },
                                                        "is_private": {
                                                            "type": "boolean"
                                                        },
                                                        "reading_status": {
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object",
                                                    "nullable": true
                                                },
                                                "reviews": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "object"
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Book not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Books"
                ],
                "summary": "Update book information",
                "description": "Updates an existing book's information",
                "operationId": "updateBook",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Book ID",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "B-1ABC-2DEF"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Book data to update",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "title"
                                ],
                                "properties": {
                                    "title": {
                                        "type": "string",
                                        "example": "Updated Book Title"
                                    },
                                    "isbn": {
                                        "type": "string",
                                        "example": "1234567890"
                                    },
                                    "authors": {
                                        "type": "string",
                                        "example": "Author Name"
                                    },
                                    "thumbnail": {
                                        "type": "string",
                                        "format": "url"
                                    },
                                    "language": {
                                        "type": "string",
                                        "example": "en"
                                    },
                                    "publisher": {
                                        "type": "string",
                                        "example": "Publisher Name"
                                    },
                                    "edition": {
                                        "type": "string",
                                        "example": "1st Edition"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Book updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Book"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Book not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Books"
                ],
                "summary": "Delete book from global catalog",
                "description": "Permanently deletes a book from the global books table. This will also remove it from all users' libraries. Use DELETE /user/books/{book} to remove from personal library only.",
                "operationId": "deleteBook",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Book ID",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "B-1ABC-2DEF"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Book deleted from global catalog",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Book deleted from global catalog"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Book not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/books/{id}/enrich": {
            "post": {
                "tags": [
                    "Books"
                ],
                "summary": "Enrich book(s) information using Google Books API",
                "description": "Fetches additional information about a book (or multiple books when batch=true) from Google Books API and updates the local record(s)",
                "operationId": "enrichBook",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Book ID (not used when batch=true)",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "example": "B-3D6Y-9IO8"
                        }
                    },
                    {
                        "name": "batch",
                        "in": "query",
                        "description": "Enable batch enrichment mode",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "example": true
                        }
                    }
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "google_id": {
                                        "description": "Optional Google Books ID to use for enrichment (single book)",
                                        "type": "string",
                                        "example": "8fcQEAAAQBAJ"
                                    },
                                    "book_ids": {
                                        "description": "Array of book IDs for batch enrichment (when batch=true)",
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Book enriched successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Book enriched successfully"
                                        },
                                        "book_id": {
                                            "type": "string",
                                            "example": "B-3D6Y-9IO8"
                                        },
                                        "added_fields": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "404": {
                        "description": "Book not found"
                    },
                    "422": {
                        "description": "Enrichment failed"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/auth/verify-email": {
            "get": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Verify email address",
                "description": "Verifies the user's email address using the link sent via email",
                "operationId": "verifyEmail",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "User ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "hash",
                        "in": "query",
                        "description": "Verification hash",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "expires",
                        "in": "query",
                        "description": "Expiration timestamp",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "signature",
                        "in": "query",
                        "description": "URL signature",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Email verified successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Email verified successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid or expired link",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Invalid or expired verification link"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Send email verification link",
                "description": "Sends an email verification link to the authenticated user",
                "operationId": "sendVerificationEmail",
                "responses": {
                    "200": {
                        "description": "Verification link sent",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Verification link sent successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Email already verified",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Email already verified"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/users/{id}/follow": {
            "post": {
                "tags": [
                    "Social"
                ],
                "summary": "Follow a user",
                "operationId": "6f109447b27b2dcc26dbf7dfeb0ce585",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "U-ABC1-DEF2"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully followed user",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Successfully followed user"
                                        },
                                        "data": {
                                            "properties": {
                                                "follower": {
                                                    "properties": {
                                                        "id": {
                                                            "type": "string",
                                                            "example": "U-XYZ3-UVW4"
                                                        },
                                                        "display_name": {
                                                            "type": "string",
                                                            "example": "John Doe"
                                                        },
                                                        "username": {
                                                            "type": "string",
                                                            "example": "john_doe"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "following": {
                                                    "properties": {
                                                        "id": {
                                                            "type": "string",
                                                            "example": "U-ABC1-DEF2"
                                                        },
                                                        "display_name": {
                                                            "type": "string",
                                                            "example": "Jane Smith"
                                                        },
                                                        "username": {
                                                            "type": "string",
                                                            "example": "jane_smith"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "following_count": {
                                                    "type": "integer",
                                                    "example": 5
                                                },
                                                "followers_count": {
                                                    "type": "integer",
                                                    "example": 12
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request (already following, cannot follow self)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Already following this user"
                                        },
                                        "code": {
                                            "type": "string",
                                            "example": "ALREADY_FOLLOWING"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Social"
                ],
                "summary": "Unfollow a user",
                "operationId": "18f3236d9fd1ad558268d2dd074e5425",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "U-ABC1-DEF2"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully unfollowed user",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Successfully unfollowed user"
                                        },
                                        "data": {
                                            "properties": {
                                                "following_count": {
                                                    "type": "integer",
                                                    "example": 4
                                                },
                                                "followers_count": {
                                                    "type": "integer",
                                                    "example": 11
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request (not following user)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Not following this user"
                                        },
                                        "code": {
                                            "type": "string",
                                            "example": "NOT_FOLLOWING"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/users/{id}/followers": {
            "get": {
                "tags": [
                    "Social"
                ],
                "summary": "Get list of followers for a user",
                "operationId": "6e630eb56369e97c29b81c98e068fbd1",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "U-ABC1-DEF2"
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Items per page (default 20)",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "example": 20
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of followers",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "properties": {
                                                "followers": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/User"
                                                    }
                                                },
                                                "pagination": {
                                                    "properties": {
                                                        "total": {
                                                            "type": "integer",
                                                            "example": 10
                                                        },
                                                        "current_page": {
                                                            "type": "integer",
                                                            "example": 1
                                                        },
                                                        "per_page": {
                                                            "type": "integer",
                                                            "example": 20
                                                        },
                                                        "last_page": {
                                                            "type": "integer",
                                                            "example": 1
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/users/{id}/following": {
            "get": {
                "tags": [
                    "Social"
                ],
                "summary": "Get list of users that a user is following",
                "operationId": "2b478d3762ffcd6828796157b9f2529b",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "U-ABC1-DEF2"
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Items per page (default 20)",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "example": 20
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of following users",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "properties": {
                                                "following": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/User"
                                                    }
                                                },
                                                "pagination": {
                                                    "properties": {
                                                        "total": {
                                                            "type": "integer",
                                                            "example": 10
                                                        },
                                                        "current_page": {
                                                            "type": "integer",
                                                            "example": 1
                                                        },
                                                        "per_page": {
                                                            "type": "integer",
                                                            "example": 20
                                                        },
                                                        "last_page": {
                                                            "type": "integer",
                                                            "example": 1
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/follow-requests": {
            "get": {
                "tags": [
                    "Social"
                ],
                "summary": "Get pending follow requests for authenticated user",
                "operationId": "600e2047d73b6643e5f2539c0ddf934a",
                "responses": {
                    "200": {
                        "description": "List of pending follow requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/FollowRequest"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/follow-requests/{followId}": {
            "post": {
                "tags": [
                    "Social"
                ],
                "summary": "Accept a follow request",
                "operationId": "56916fdc3292c27b3907163a025f6251",
                "parameters": [
                    {
                        "name": "followId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Follow request accepted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Follow request accepted"
                                        },
                                        "data": {
                                            "properties": {
                                                "follow_id": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "follower": {
                                                    "properties": {
                                                        "id": {
                                                            "type": "string",
                                                            "example": "U-ABC1-DEF2"
                                                        },
                                                        "display_name": {
                                                            "type": "string",
                                                            "example": "John Doe"
                                                        },
                                                        "username": {
                                                            "type": "string",
                                                            "example": "john_doe"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Follow request not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Social"
                ],
                "summary": "Reject a follow request",
                "operationId": "1aba9892ed977a7bc0ea8fb8edde41b3",
                "parameters": [
                    {
                        "name": "followId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Follow request rejected successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Follow request rejected"
                                        },
                                        "data": {
                                            "properties": {
                                                "follower": {
                                                    "properties": {
                                                        "id": {
                                                            "type": "string",
                                                            "example": "U-ABC1-DEF2"
                                                        },
                                                        "display_name": {
                                                            "type": "string",
                                                            "example": "John Doe"
                                                        },
                                                        "username": {
                                                            "type": "string",
                                                            "example": "john_doe"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Follow request not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/health": {
            "get": {
                "tags": [
                    "Health"
                ],
                "summary": "Health check endpoint",
                "description": "Returns the health status of the API and its dependencies",
                "operationId": "healthCheck",
                "responses": {
                    "200": {
                        "description": "Service is healthy",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "description": "Overall health status",
                                            "type": "string",
                                            "example": "healthy"
                                        },
                                        "timestamp": {
                                            "description": "Current timestamp",
                                            "type": "string",
                                            "format": "date-time",
                                            "example": "2024-01-10T12:00:00Z"
                                        },
                                        "environment": {
                                            "description": "Current environment",
                                            "type": "string",
                                            "example": "production"
                                        },
                                        "version": {
                                            "description": "Application version",
                                            "type": "string",
                                            "example": "1.0.0"
                                        },
                                        "services": {
                                            "description": "Health status of individual services",
                                            "properties": {
                                                "database": {
                                                    "description": "Database connection status",
                                                    "type": "boolean",
                                                    "example": true
                                                },
                                                "cache": {
                                                    "description": "Cache connection status",
                                                    "type": "boolean",
                                                    "example": true
                                                },
                                                "google_books_api": {
                                                    "description": "Google Books API connectivity",
                                                    "type": "boolean",
                                                    "example": true
                                                },
                                                "storage": {
                                                    "description": "File storage write/read capabilities",
                                                    "type": "boolean",
                                                    "example": true
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "uptime": {
                                            "description": "Application uptime information",
                                            "properties": {
                                                "seconds": {
                                                    "description": "Uptime in seconds",
                                                    "type": "integer",
                                                    "example": 3600
                                                },
                                                "human": {
                                                    "description": "Human readable uptime",
                                                    "type": "string",
                                                    "example": "1h"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Service unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "unhealthy"
                                        },
                                        "timestamp": {
                                            "type": "string",
                                            "format": "date-time"
                                        },
                                        "environment": {
                                            "type": "string"
                                        },
                                        "version": {
                                            "type": "string"
                                        },
                                        "services": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/user/books": {
            "get": {
                "tags": [
                    "User Library"
                ],
                "summary": "Get user's personal library",
                "description": "Returns all books in the authenticated user's personal library",
                "operationId": "getUserBooks",
                "responses": {
                    "200": {
                        "description": "User's books library",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Book"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "User Library"
                ],
                "summary": "Add book to user's personal library",
                "description": "Adds a book to the authenticated user's personal library using book identifiers. Priority: book_id > isbn > google_id. If book doesn't exist and google_id provided, creates and enriches automatically.",
                "operationId": "addBookToLibrary",
                "requestBody": {
                    "description": "Book identifiers - provide at least one",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "book_id": {
                                        "description": "Book ID if already exists in system",
                                        "type": "string",
                                        "example": "B-1ABC-2DEF"
                                    },
                                    "isbn": {
                                        "description": "ISBN to search for existing book",
                                        "type": "string",
                                        "example": "9781505108293"
                                    },
                                    "google_id": {
                                        "description": "Google Books ID for search/creation and enrichment",
                                        "type": "string",
                                        "example": "HuKNDAAAQBAJ"
                                    },
                                    "is_private": {
                                        "description": "Whether to mark this book as private in user's library",
                                        "type": "boolean",
                                        "example": false
                                    },
                                    "reading_status": {
                                        "description": "Reading status for this book",
                                        "type": "string",
                                        "enum": [
                                            "want_to_read",
                                            "reading",
                                            "read",
                                            "abandoned",
                                            "on_hold",
                                            "re_reading"
                                        ],
                                        "example": "read"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Book added to library successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "book": {
                                            "$ref": "#/components/schemas/Book"
                                        },
                                        "enriched": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "already_in_library": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Book added to your library successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Book already in library",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "book": {
                                            "$ref": "#/components/schemas/Book"
                                        },
                                        "enriched": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "already_in_library": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Book is already in your library"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/user/books/{book}": {
            "get": {
                "tags": [
                    "User Library"
                ],
                "summary": "Get specific book from user's library",
                "description": "Returns a specific book from the authenticated user's library with pivot data (read dates, status, etc.) and reviews",
                "operationId": "getUserBook",
                "parameters": [
                    {
                        "name": "book",
                        "in": "path",
                        "description": "Book ID",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "B-1ABC-2DEF"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Book details with pivot data and reviews",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Book"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Book not found in user's library"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "User Library"
                ],
                "summary": "Remove book from user's library",
                "description": "Removes a book from the authenticated user's personal library",
                "operationId": "bRemoveBookFromLibrary",
                "parameters": [
                    {
                        "name": "book",
                        "in": "path",
                        "description": "Book ID",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "B-1ABC-2DEF"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Book removed from library",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Book removed from your library"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Book not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "User Library"
                ],
                "summary": "Update book in user's library",
                "description": "Updates book properties in the authenticated user's library (read date, privacy, etc.)",
                "operationId": "aUpdateUserBook",
                "parameters": [
                    {
                        "name": "book",
                        "in": "path",
                        "description": "Book ID",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "B-1ABC-2DEF"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Book update data (provide any combination of fields)",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "read_at": {
                                        "description": "Date when the book was read (nullable to mark as unread)",
                                        "type": "string",
                                        "format": "date",
                                        "example": "2024-01-15"
                                    },
                                    "is_private": {
                                        "description": "Whether the book should be private",
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "reading_status": {
                                        "description": "Reading status for this book",
                                        "type": "string",
                                        "enum": [
                                            "want_to_read",
                                            "reading",
                                            "read",
                                            "abandoned",
                                            "on_hold",
                                            "re_reading"
                                        ],
                                        "example": "reading"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Book updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Book updated successfully"
                                        },
                                        "read_at": {
                                            "type": "string",
                                            "format": "date",
                                            "example": "2024-01-15"
                                        },
                                        "is_private": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "reading_status": {
                                            "type": "string",
                                            "example": "reading"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Book not found in user's library"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/users/{user}/books/{book}": {
            "get": {
                "tags": [
                    "User Library"
                ],
                "summary": "Get specific book from a user's library",
                "description": "Returns a specific book from a user's library with their pivot data (read dates, status, etc.) and reviews. Respects privacy settings.",
                "operationId": "getSpecificUserBook",
                "parameters": [
                    {
                        "name": "user",
                        "in": "path",
                        "description": "User ID or username",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "U-1ABC-2DEF"
                        }
                    },
                    {
                        "name": "book",
                        "in": "path",
                        "description": "Book ID",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "B-1ABC-2DEF"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Book details with user's pivot data and reviews",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Book"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Book not found in user's library or user not found"
                    },
                    "403": {
                        "description": "Access denied - private profile"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/users": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "List users",
                "description": "Returns paginated list of users with followers/following counts",
                "operationId": "getUsers",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "maximum": 100,
                            "minimum": 1,
                            "example": 15
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Search filter for name, username, or email",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "example": "john"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Users list",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/User"
                                            }
                                        },
                                        "current_page": {
                                            "type": "integer"
                                        },
                                        "total": {
                                            "type": "integer"
                                        },
                                        "per_page": {
                                            "type": "integer"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Create new user",
                "description": "Creates a new user account",
                "operationId": "createUser",
                "requestBody": {
                    "description": "User data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "display_name",
                                    "email",
                                    "username"
                                ],
                                "properties": {
                                    "display_name": {
                                        "description": "User display name",
                                        "type": "string",
                                        "example": "John Doe"
                                    },
                                    "email": {
                                        "description": "User email",
                                        "type": "string",
                                        "format": "email",
                                        "example": "john@example.com"
                                    },
                                    "username": {
                                        "description": "Unique username",
                                        "type": "string",
                                        "example": "john_doe"
                                    },
                                    "shelf_name": {
                                        "description": "Shelf name (optional)",
                                        "type": "string",
                                        "example": "John's Library"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "User created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/users/{identifier}": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get user by ID or username",
                "description": "Returns user information with books if profile is public or user is following",
                "operationId": "getUser",
                "parameters": [
                    {
                        "name": "identifier",
                        "in": "path",
                        "description": "User ID (starts with U-) or username",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "john_doe"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User information with privacy-aware book visibility",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Profile is private and user is not following",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "This profile is private"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/users/{id}": {
            "put": {
                "tags": [
                    "Users"
                ],
                "summary": "Update user",
                "description": "Updates user information",
                "operationId": "updateUser",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "User ID",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "U-1ABC-2DEF"
                        }
                    }
                ],
                "requestBody": {
                    "description": "User data to update",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "display_name",
                                    "email",
                                    "username"
                                ],
                                "properties": {
                                    "display_name": {
                                        "description": "User display name",
                                        "type": "string",
                                        "example": "John Doe"
                                    },
                                    "email": {
                                        "description": "User email",
                                        "type": "string",
                                        "format": "email",
                                        "example": "john@example.com"
                                    },
                                    "username": {
                                        "description": "Unique username",
                                        "type": "string",
                                        "example": "john_doe"
                                    },
                                    "shelf_name": {
                                        "description": "Shelf name (optional)",
                                        "type": "string",
                                        "example": "John's Library"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Users"
                ],
                "summary": "Delete user",
                "description": "Deletes a user account",
                "operationId": "deleteUser",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "User ID",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "U-1ABC-2DEF"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "User deleted successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/users/{id}/shelf-image": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Generate user's shelf image for social sharing",
                "description": "Returns a generated image of user's bookshelf for Open Graph sharing",
                "operationId": "getUserShelfImage",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "User ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Generated shelf image",
                        "content": {
                            "image/jpeg": {}
                        }
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            }
        },
        "/reviews": {
            "get": {
                "tags": [
                    "Reviews"
                ],
                "summary": "Get paginated list of reviews with visibility filtering",
                "description": "Returns paginated reviews with visibility logic: authenticated users see public reviews + their own reviews (any visibility), non-authenticated users see only public reviews",
                "operationId": "a0d00e73ae8bc8abf7a182a3bcc3e145",
                "parameters": [
                    {
                        "name": "book_id",
                        "in": "query",
                        "description": "Filter by book ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "user_id",
                        "in": "query",
                        "description": "Filter by user ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "rating",
                        "in": "query",
                        "description": "Filter by rating",
                        "schema": {
                            "type": "integer",
                            "maximum": 5,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number for pagination",
                        "schema": {
                            "type": "integer",
                            "default": 1,
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/ReviewResource"
                                            }
                                        },
                                        "meta": {
                                            "properties": {
                                                "current_page": {
                                                    "type": "integer"
                                                },
                                                "from": {
                                                    "type": "integer"
                                                },
                                                "last_page": {
                                                    "type": "integer"
                                                },
                                                "path": {
                                                    "type": "string"
                                                },
                                                "per_page": {
                                                    "type": "integer"
                                                },
                                                "to": {
                                                    "type": "integer"
                                                },
                                                "total": {
                                                    "type": "integer"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "links": {
                                            "properties": {
                                                "first": {
                                                    "type": "string"
                                                },
                                                "last": {
                                                    "type": "string"
                                                },
                                                "prev": {
                                                    "type": "string",
                                                    "nullable": true
                                                },
                                                "next": {
                                                    "type": "string",
                                                    "nullable": true
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated - will show only public reviews"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Reviews"
                ],
                "summary": "Create a new review",
                "description": "Create a new review for a book. Users can only have one review per book.",
                "operationId": "9fe745d363761b681b0e4f1d129e2456",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "book_id",
                                    "content",
                                    "rating"
                                ],
                                "properties": {
                                    "book_id": {
                                        "description": "ID of the book being reviewed",
                                        "type": "string",
                                        "example": "B-XYZ3-UVW4"
                                    },
                                    "title": {
                                        "description": "Optional title for the review",
                                        "type": "string",
                                        "maxLength": 200,
                                        "example": "Amazing book!"
                                    },
                                    "content": {
                                        "description": "Review content",
                                        "type": "string",
                                        "maxLength": 2000,
                                        "example": "This book was incredible..."
                                    },
                                    "rating": {
                                        "description": "Rating from 1 to 5 stars",
                                        "type": "integer",
                                        "maximum": 5,
                                        "minimum": 1,
                                        "example": 5
                                    },
                                    "visibility_level": {
                                        "description": "Review visibility level",
                                        "type": "string",
                                        "enum": [
                                            "private",
                                            "friends",
                                            "public"
                                        ],
                                        "example": "public"
                                    },
                                    "is_spoiler": {
                                        "description": "Whether the review contains spoilers",
                                        "type": "boolean",
                                        "example": false
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Review created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ReviewResource"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        },
                                        "errors": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "User already has a review for this book",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "You already have a review for this book"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/reviews/{id}": {
            "get": {
                "tags": [
                    "Reviews"
                ],
                "summary": "Get a specific review",
                "description": "Get a specific review by ID with visibility checking. Private reviews can only be viewed by their owners.",
                "operationId": "59c58623cd284fa1d22b01b6eaa87729",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Review ID",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "R-3D6Y-9IO8"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ReviewResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Review not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Review not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Not authorized to view this review",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Not authorized to view this review"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Reviews"
                ],
                "summary": "Update a review",
                "description": "Update an existing review. Only the review owner can update their review.",
                "operationId": "aab08b97bf5c417a4ae9061ecddf416c",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Review ID",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "R-3D6Y-9IO8"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "title": {
                                        "description": "Optional review title",
                                        "type": "string",
                                        "maxLength": 200,
                                        "example": "Updated title"
                                    },
                                    "content": {
                                        "description": "Review content",
                                        "type": "string",
                                        "maxLength": 2000,
                                        "example": "Updated content..."
                                    },
                                    "rating": {
                                        "description": "Rating from 1 to 5 stars",
                                        "type": "integer",
                                        "maximum": 5,
                                        "minimum": 1,
                                        "example": 4
                                    },
                                    "visibility_level": {
                                        "description": "Review visibility level",
                                        "type": "string",
                                        "enum": [
                                            "private",
                                            "friends",
                                            "public"
                                        ],
                                        "example": "public"
                                    },
                                    "is_spoiler": {
                                        "description": "Whether the review contains spoilers",
                                        "type": "boolean",
                                        "example": true
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Review updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ReviewResource"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Not authorized to update this review",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Not authorized to update this review"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Review not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Review not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        },
                                        "errors": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Reviews"
                ],
                "summary": "Delete a review",
                "description": "Delete an existing review. Only the review owner or admin can delete a review.",
                "operationId": "27b37ca28fa012ce66153cad66bedfc9",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Review ID",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "R-3D6Y-9IO8"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Review deleted successfully"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Not authorized to delete this review",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Not authorized to delete this review"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Review not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Review not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/reviews/{id}/helpful": {
            "post": {
                "tags": [
                    "Reviews"
                ],
                "summary": "Mark a review as helpful",
                "operationId": "7697b3cefc793bb5fd78126b9b8a068c",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Review marked as helpful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Review marked as helpful"
                                        },
                                        "helpful_count": {
                                            "type": "integer",
                                            "example": 13
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Review not found"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        }
    },
    "components": {
        "schemas": {
            "ReviewResource": {
                "title": "Review Resource",
                "description": "Review resource with user and book information",
                "properties": {
                    "id": {
                        "description": "Review ID",
                        "type": "string",
                        "example": "R-3D6Y-9IO8"
                    },
                    "user_id": {
                        "description": "User ID who wrote the review",
                        "type": "string",
                        "example": "U-ABC1-DEF2"
                    },
                    "book_id": {
                        "description": "Book ID being reviewed",
                        "type": "string",
                        "example": "B-XYZ3-UVW4"
                    },
                    "title": {
                        "description": "Review title",
                        "type": "string",
                        "example": "Amazing book!",
                        "nullable": true
                    },
                    "content": {
                        "description": "Review content",
                        "type": "string",
                        "example": "This book was incredible..."
                    },
                    "rating": {
                        "description": "Rating from 1 to 5",
                        "type": "integer",
                        "maximum": 5,
                        "minimum": 1,
                        "example": 5
                    },
                    "visibility_level": {
                        "description": "Review visibility level",
                        "type": "string",
                        "enum": [
                            "private",
                            "friends",
                            "public"
                        ],
                        "example": "public"
                    },
                    "is_spoiler": {
                        "description": "Whether the review contains spoilers",
                        "type": "boolean",
                        "example": false
                    },
                    "helpful_count": {
                        "description": "Number of users who found this review helpful",
                        "type": "integer",
                        "example": 12
                    },
                    "created_at": {
                        "description": "Review creation timestamp",
                        "type": "string",
                        "format": "date-time",
                        "example": "2025-08-04T12:57:42.000000Z"
                    },
                    "updated_at": {
                        "description": "Review last update timestamp",
                        "type": "string",
                        "format": "date-time",
                        "example": "2025-08-04T12:57:42.000000Z"
                    },
                    "user": {
                        "description": "User who wrote the review",
                        "properties": {
                            "id": {
                                "type": "string",
                                "example": "U-ABC1-DEF2"
                            },
                            "display_name": {
                                "type": "string",
                                "example": "John Doe"
                            },
                            "username": {
                                "type": "string",
                                "example": "johndoe"
                            },
                            "avatar": {
                                "type": "string",
                                "example": "https://example.com/avatar.jpg",
                                "nullable": true
                            }
                        },
                        "type": "object",
                        "nullable": true
                    },
                    "book": {
                        "description": "Book being reviewed",
                        "properties": {
                            "id": {
                                "type": "string",
                                "example": "B-XYZ3-UVW4"
                            },
                            "title": {
                                "type": "string",
                                "example": "The Great Book"
                            },
                            "thumbnail": {
                                "type": "string",
                                "example": "https://example.com/book-cover.jpg",
                                "nullable": true
                            },
                            "formatted_published_date": {
                                "type": "string",
                                "example": "2023",
                                "nullable": true
                            },
                            "average_rating": {
                                "type": "string",
                                "example": "4.5000",
                                "nullable": true
                            },
                            "reviews_count": {
                                "type": "integer",
                                "example": 25
                            }
                        },
                        "type": "object",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "Author": {
                "title": "Author",
                "description": "Author model",
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "A-1ABC-2DEF"
                    },
                    "name": {
                        "type": "string",
                        "example": "J.R.R. Tolkien"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "Book": {
                "title": "Book",
                "description": "Book model with extended information",
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "B-3D6Y-9IO8"
                    },
                    "google_id": {
                        "type": "string",
                        "example": "8fcQEAAAQBAJ",
                        "nullable": true
                    },
                    "amazon_asin": {
                        "type": "string",
                        "example": "B08LPMFDQC",
                        "nullable": true
                    },
                    "asin_status": {
                        "type": "string",
                        "enum": [
                            "pending",
                            "processing",
                            "completed",
                            "failed"
                        ],
                        "example": "completed"
                    },
                    "asin_processed_at": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "isbn": {
                        "type": "string",
                        "example": "9788533613379",
                        "nullable": true
                    },
                    "title": {
                        "type": "string",
                        "example": "The Lord of the Rings"
                    },
                    "subtitle": {
                        "type": "string",
                        "example": "The Fellowship of the Ring",
                        "nullable": true
                    },
                    "authors": {
                        "type": "string",
                        "example": "J.R.R. Tolkien"
                    },
                    "description": {
                        "type": "string",
                        "nullable": true
                    },
                    "thumbnail": {
                        "type": "string",
                        "format": "url",
                        "nullable": true
                    },
                    "language": {
                        "type": "string",
                        "example": "en",
                        "nullable": true
                    },
                    "publisher": {
                        "type": "string",
                        "example": "HarperCollins",
                        "nullable": true
                    },
                    "published_date": {
                        "type": "string",
                        "format": "date",
                        "nullable": true
                    },
                    "page_count": {
                        "type": "integer",
                        "example": 423,
                        "nullable": true
                    },
                    "format": {
                        "type": "string",
                        "enum": [
                            "hardcover",
                            "paperback",
                            "ebook",
                            "audiobook"
                        ],
                        "nullable": true
                    },
                    "print_type": {
                        "type": "string",
                        "example": "BOOK",
                        "nullable": true
                    },
                    "height": {
                        "description": "Height in millimeters",
                        "type": "number",
                        "format": "float",
                        "example": 198.5,
                        "nullable": true
                    },
                    "width": {
                        "description": "Width in millimeters",
                        "type": "number",
                        "format": "float",
                        "example": 129.2,
                        "nullable": true
                    },
                    "thickness": {
                        "description": "Thickness in millimeters",
                        "type": "number",
                        "format": "float",
                        "example": 23.1,
                        "nullable": true
                    },
                    "maturity_rating": {
                        "type": "string",
                        "enum": [
                            "NOT_MATURE",
                            "MATURE"
                        ],
                        "nullable": true
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "nullable": true
                    },
                    "industry_identifiers": {
                        "type": "array",
                        "items": {
                            "type": "object"
                        },
                        "nullable": true
                    },
                    "info_quality": {
                        "type": "string",
                        "enum": [
                            "basic",
                            "enhanced",
                            "complete"
                        ],
                        "example": "enhanced"
                    },
                    "enriched_at": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "edition": {
                        "type": "string",
                        "nullable": true
                    },
                    "pivot": {
                        "description": "User-specific book data (when fetched from user's library)",
                        "properties": {
                            "added_at": {
                                "description": "When the book was added to user's library",
                                "type": "string",
                                "format": "date-time"
                            },
                            "read_at": {
                                "description": "Date when the book was read",
                                "type": "string",
                                "format": "date",
                                "nullable": true
                            },
                            "is_private": {
                                "description": "Whether this book is private in the user's library",
                                "type": "boolean"
                            },
                            "reading_status": {
                                "description": "Current reading status",
                                "type": "string",
                                "enum": [
                                    "want_to_read",
                                    "reading",
                                    "read",
                                    "abandoned",
                                    "on_hold",
                                    "re_reading"
                                ]
                            }
                        },
                        "type": "object",
                        "nullable": true
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "Follow": {
                "title": "Follow",
                "description": "User follow relationship model",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "follower_id": {
                        "description": "User ID of the person following",
                        "type": "string",
                        "example": "U-ABC1-DEF2"
                    },
                    "followed_id": {
                        "description": "User ID of the person being followed",
                        "type": "string",
                        "example": "U-XYZ3-UVW4"
                    },
                    "status": {
                        "description": "Status of the follow relationship",
                        "type": "string",
                        "enum": [
                            "pending",
                            "accepted"
                        ],
                        "example": "accepted"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "FollowRequest": {
                "title": "Follow Request",
                "description": "Follow request with user details",
                "properties": {
                    "id": {
                        "description": "Follow request ID",
                        "type": "integer",
                        "example": 1
                    },
                    "follower": {
                        "description": "User who sent the follow request",
                        "properties": {
                            "id": {
                                "type": "string",
                                "example": "U-ABC1-DEF2"
                            },
                            "display_name": {
                                "type": "string",
                                "example": "John Doe"
                            },
                            "username": {
                                "type": "string",
                                "example": "john_doe"
                            },
                            "avatar": {
                                "type": "string",
                                "example": "https://example.com/avatar.jpg",
                                "nullable": true
                            }
                        },
                        "type": "object"
                    },
                    "created_at": {
                        "description": "When the follow request was created",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "RelatedBook": {
                "title": "RelatedBook",
                "description": "Related book relationship model",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "book_id": {
                        "type": "string",
                        "example": "B-1ABC-2DEF"
                    },
                    "related_book_id": {
                        "type": "string",
                        "example": "B-3XYZ-4UVW"
                    },
                    "relationship_type": {
                        "description": "Type of relationship between books",
                        "type": "string",
                        "example": "similar"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "Review": {
                "title": "Review",
                "description": "Book review model",
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "R-3D6Y-9IO8"
                    },
                    "user_id": {
                        "type": "string",
                        "example": "U-ABC1-DEF2"
                    },
                    "book_id": {
                        "type": "string",
                        "example": "B-XYZ3-UVW4"
                    },
                    "title": {
                        "type": "string",
                        "example": "Amazing book!",
                        "nullable": true
                    },
                    "content": {
                        "type": "string",
                        "example": "This book was incredible..."
                    },
                    "rating": {
                        "type": "integer",
                        "maximum": 5,
                        "minimum": 1,
                        "example": 5
                    },
                    "visibility_level": {
                        "type": "string",
                        "enum": [
                            "private",
                            "friends",
                            "public"
                        ],
                        "example": "public"
                    },
                    "is_spoiler": {
                        "type": "boolean",
                        "example": false
                    },
                    "helpful_count": {
                        "type": "integer",
                        "example": 12
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "User": {
                "title": "User",
                "description": "User model",
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "U-1ABC-2DEF"
                    },
                    "google_id": {
                        "type": "string",
                        "example": "123456789012345678901",
                        "nullable": true
                    },
                    "display_name": {
                        "type": "string",
                        "example": "John Doe"
                    },
                    "email": {
                        "type": "string",
                        "format": "email",
                        "example": "john@example.com"
                    },
                    "username": {
                        "type": "string",
                        "example": "john_doe"
                    },
                    "avatar": {
                        "type": "string",
                        "example": "https://lh3.googleusercontent.com/...",
                        "nullable": true
                    },
                    "shelf_name": {
                        "type": "string",
                        "example": "John's Library"
                    },
                    "role": {
                        "type": "string",
                        "enum": [
                            "admin",
                            "user"
                        ],
                        "example": "user"
                    },
                    "followers_count": {
                        "type": "integer",
                        "example": 15
                    },
                    "following_count": {
                        "type": "integer",
                        "example": 8
                    },
                    "is_private": {
                        "description": "Whether the user's profile and library are private",
                        "type": "boolean",
                        "example": false
                    },
                    "is_following": {
                        "description": "Whether the current user is following this user (only included when authenticated)",
                        "type": "boolean",
                        "example": false
                    },
                    "has_pending_follow_request": {
                        "description": "Whether the current user has a pending follow request to this user (only included when authenticated)",
                        "type": "boolean",
                        "example": false
                    },
                    "pending_follow_requests_count": {
                        "description": "Number of pending follow requests for this user (only for private accounts)",
                        "type": "integer",
                        "example": 3
                    },
                    "email_verified": {
                        "type": "boolean",
                        "example": false
                    },
                    "email_verified_at": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "UserBook": {
                "title": "UserBook",
                "description": "User book relationship (pivot table model)",
                "properties": {
                    "user_id": {
                        "type": "string",
                        "example": "U-1ABC-2DEF"
                    },
                    "book_id": {
                        "type": "string",
                        "example": "B-3XYZ-4UVW"
                    },
                    "added_at": {
                        "description": "When the book was added to user's library",
                        "type": "string",
                        "format": "date-time"
                    },
                    "read_at": {
                        "description": "Date when the book was read",
                        "type": "string",
                        "format": "date",
                        "nullable": true
                    },
                    "is_private": {
                        "description": "Whether this book is private in the user's library",
                        "type": "boolean",
                        "example": false
                    },
                    "reading_status": {
                        "description": "User's reading status for this book",
                        "type": "string",
                        "enum": [
                            "want_to_read",
                            "reading",
                            "read",
                            "abandoned",
                            "on_hold",
                            "re_reading"
                        ],
                        "example": "read"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            }
        },
        "securitySchemes": {
            "bearerAuth": {
                "type": "http",
                "description": "Insert the access token obtained from login endpoint. Format: Bearer {token}",
                "bearerFormat": "Token",
                "scheme": "bearer"
            }
        }
    },
    "tags": [
        {
            "name": "Authentication",
            "description": "User authentication endpoints"
        },
        {
            "name": "Books",
            "description": "Book management and search"
        },
        {
            "name": "Health",
            "description": "Health check endpoints"
        },
        {
            "name": "Reviews",
            "description": "Book reviews and ratings"
        },
        {
            "name": "Social",
            "description": "Follow system and social features"
        },
        {
            "name": "User Library",
            "description": "User's personal library management"
        },
        {
            "name": "Users",
            "description": "User management and profiles"
        },
        {
            "name": "Authors",
            "description": "Authors"
        }
    ]
}