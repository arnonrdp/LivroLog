name: Fix Proxy Direct

on:
  workflow_dispatch:

jobs:
  fix-proxy:
    name: fix-proxy
    runs-on: ubuntu-latest
    
    steps:
      - name: Configure Apache proxy directly
        run: |
          # Setup SSH
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "${{ secrets.SERVER_SSH_KEY }}" > ~/.ssh/proxy_key
          chmod 600 ~/.ssh/proxy_key
          
          # SSH Config
          echo "Host ${{ secrets.SERVER_HOST }}" >> ~/.ssh/config
          echo "  HostName ${{ secrets.SERVER_HOST }}" >> ~/.ssh/config
          echo "  User ${{ secrets.SERVER_USER }}" >> ~/.ssh/config
          echo "  IdentityFile ~/.ssh/proxy_key" >> ~/.ssh/config
          echo "  StrictHostKeyChecking no" >> ~/.ssh/config
          echo "  UserKnownHostsFile /dev/null" >> ~/.ssh/config
          chmod 600 ~/.ssh/config
          
          # Execute direct Apache configuration
          ssh ${{ secrets.SERVER_HOST }} << 'PROXY_SCRIPT'
            echo "=== Direct Apache Proxy Configuration ==="
            date
            
            # Check current Apache status
            echo "Current Apache processes:"
            ps aux | grep httpd | grep -v grep || echo "No Apache processes running"
            
            # Find Apache configuration directory
            APACHE_CONF_DIR="/opt/bitnami/apache/conf"
            if [ ! -d "$APACHE_CONF_DIR" ]; then
              APACHE_CONF_DIR="/etc/apache2"
            fi
            
            echo "Using Apache config directory: $APACHE_CONF_DIR"
            
            # Backup existing configuration
            sudo cp "$APACHE_CONF_DIR/httpd.conf" "$APACHE_CONF_DIR/httpd.conf.backup.$(date +%Y%m%d_%H%M%S)" 2>/dev/null || true
            
            # Create vhosts directory if it doesn't exist
            sudo mkdir -p "$APACHE_CONF_DIR/vhosts"
            
            # Create virtual host configuration for development domains
            echo "Creating virtual host configuration..."
            sudo tee "$APACHE_CONF_DIR/vhosts/livrolog-dev.conf" > /dev/null << 'VHOST_EOF'
# Enable required modules
LoadModule proxy_module modules/mod_proxy.so
LoadModule proxy_http_module modules/mod_proxy_http.so
LoadModule headers_module modules/mod_headers.so

# Virtual Host for dev.livrolog.com (Web Frontend)
<VirtualHost *:80>
    ServerName dev.livrolog.com
    ServerAlias www.dev.livrolog.com
    
    DocumentRoot /opt/bitnami/apache/htdocs
    
    # Proxy all requests to Docker container
    ProxyPreserveHost On
    ProxyPass / http://127.0.0.1:8080/
    ProxyPassReverse / http://127.0.0.1:8080/
    
    # Add proxy headers
    ProxyAddHeaders On
    
    # Logging
    ErrorLog /opt/bitnami/apache/logs/dev-livrolog-error.log
    CustomLog /opt/bitnami/apache/logs/dev-livrolog-access.log combined
</VirtualHost>

# Virtual Host for api.dev.livrolog.com (API Backend)
<VirtualHost *:80>
    ServerName api.dev.livrolog.com
    ServerAlias www.api.dev.livrolog.com
    
    DocumentRoot /opt/bitnami/apache/htdocs
    
    # Proxy all requests to Docker API container
    ProxyPreserveHost On
    ProxyPass / http://127.0.0.1:8081/
    ProxyPassReverse / http://127.0.0.1:8081/
    
    # Add proxy headers
    ProxyAddHeaders On
    
    # CORS headers for API
    Header always set Access-Control-Allow-Origin "*"
    Header always set Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS, PATCH"
    Header always set Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With"
    
    # Handle preflight requests
    RewriteEngine On
    RewriteCond %{REQUEST_METHOD} OPTIONS
    RewriteRule ^(.*)$ $1 [R=200,L]
    
    # Logging
    ErrorLog /opt/bitnami/apache/logs/api-dev-livrolog-error.log
    CustomLog /opt/bitnami/apache/logs/api-dev-livrolog-access.log combined
</VirtualHost>
VHOST_EOF
            
            # Include the virtual host configuration in main config if not already included
            if ! grep -q "Include.*vhosts.*livrolog-dev.conf" "$APACHE_CONF_DIR/httpd.conf"; then
              echo "Include $APACHE_CONF_DIR/vhosts/livrolog-dev.conf" | sudo tee -a "$APACHE_CONF_DIR/httpd.conf"
            fi
            
            # Test Apache configuration syntax
            echo "Testing Apache configuration..."
            if ! sudo /opt/bitnami/apache/bin/httpd -t; then
              echo "Apache configuration test failed. Reverting..."
              sudo rm -f "$APACHE_CONF_DIR/vhosts/livrolog-dev.conf"
              exit 1
            fi
            
            echo "Apache configuration test passed"
            
            # Stop any existing Apache processes
            echo "Stopping existing Apache processes..."
            sudo pkill -f httpd || true
            sleep 3
            
            # Start Apache with new configuration
            echo "Starting Apache with new configuration..."
            sudo /opt/bitnami/apache/bin/httpd -D FOREGROUND &
            sleep 5
            
            # Check if Apache started successfully
            if pgrep -f httpd > /dev/null; then
              echo "‚úÖ Apache started successfully"
              echo "Apache processes:"
              ps aux | grep httpd | grep -v grep
            else
              echo "‚ùå Failed to start Apache"
              exit 1
            fi
            
            # Test the proxy configuration
            echo ""
            echo "üß™ Testing proxy configuration..."
            
            # Test API health endpoint
            echo "Testing API proxy (api.dev.livrolog.com -> 127.0.0.1:8081)..."
            API_TEST=$(curl -s -w "HTTP_CODE:%{http_code}" -H "Host: api.dev.livrolog.com" http://127.0.0.1/healthz 2>/dev/null)
            echo "API health test: $API_TEST"
            
            # Test Web frontend
            echo "Testing Web proxy (dev.livrolog.com -> 127.0.0.1:8080)..."
            WEB_TEST=$(curl -s -o /dev/null -w "HTTP_CODE:%{http_code}" -H "Host: dev.livrolog.com" http://127.0.0.1/ 2>/dev/null)
            echo "Web frontend test: HTTP $WEB_TEST"
            
            # Test books API endpoint
            if [[ "$API_TEST" == *"HTTP_CODE:200"* ]]; then
              echo "Testing books API endpoint..."
              BOOKS_TEST=$(curl -s -w "\nHTTP_CODE:%{http_code}" -H "Host: api.dev.livrolog.com" -H "Accept: application/json" http://127.0.0.1/books?sort_by=popular 2>/dev/null | tail -1)
              echo "Books API test: $BOOKS_TEST"
            fi
            
            echo ""
            echo "‚úÖ Apache proxy configuration completed!"
            echo "üìç Services should now be accessible via:"
            echo "  ‚Ä¢ Web: https://dev.livrolog.com"
            echo "  ‚Ä¢ API: https://api.dev.livrolog.com"
            
          PROXY_SCRIPT