name: Code Quality

on:
  push:
    branches:
      - "**"
  pull_request:
  workflow_call:

jobs:
  code-style:
    runs-on: ubuntu-latest
    continue-on-error: true
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.3
          extensions: mbstring, xml, ctype, iconv, intl, pdo, zip
          tools: composer:v2

      - name: Cache composer dependencies
        uses: actions/cache@v4
        with:
          path: |
            api/vendor
            ~/.composer/cache
          key: composer-style-${{ runner.os }}-${{ hashFiles('api/composer.lock') }}
          restore-keys: |
            composer-style-${{ runner.os }}-
            composer-${{ runner.os }}-

      - name: Prepare Laravel directories
        working-directory: ./api
        run: |
          mkdir -p bootstrap/cache
          chmod -R 755 bootstrap/cache
          mkdir -p storage/logs
          chmod -R 755 storage

      - name: Install API dependencies
        working-directory: ./api
        run: composer install --no-dev --optimize-autoloader --no-interaction --ignore-platform-reqs

      - name: Laravel Pint check
        working-directory: ./api
        continue-on-error: true
        run: |
          echo "üé® Checking PHP code style..."
          if ./vendor/bin/pint --test; then
            echo "‚úÖ PHP code style is perfect"
          else
            echo "‚ö†Ô∏è  PHP code style issues found"
            echo "::warning::Run 'composer lint' to fix PHP code style issues"
          fi

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'
          cache-dependency-path: webapp/yarn.lock

      - name: Install webapp dependencies
        working-directory: ./webapp
        run: yarn install --frozen-lockfile --prefer-offline

      - name: ESLint check
        working-directory: ./webapp
        continue-on-error: true
        run: |
          echo "üé® Checking JavaScript/Vue code style..."
          if yarn lint:eslint; then
            echo "‚úÖ JavaScript code style is perfect"
          else
            echo "‚ö†Ô∏è  JavaScript code style issues found"
            echo "::warning::Run 'yarn lint' to fix JavaScript code style issues"
          fi

      - name: Prettier check
        working-directory: ./webapp
        continue-on-error: true
        run: |
          echo "üé® Checking code formatting..."
          if yarn format-check; then
            echo "‚úÖ Code formatting is perfect"
          else
            echo "‚ö†Ô∏è  Code formatting issues found"
            echo "::warning::Run 'yarn format' to fix formatting issues"
          fi

  documentation:
    runs-on: ubuntu-latest
    continue-on-error: true
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.3
          extensions: mbstring, xml, ctype, iconv, intl, pdo, zip
          tools: composer:v2

      - name: Prepare Laravel directories
        working-directory: ./api
        run: |
          mkdir -p bootstrap/cache
          chmod -R 755 bootstrap/cache
          mkdir -p storage/logs
          chmod -R 755 storage

      - name: Install dependencies
        working-directory: ./api
        run: composer install --prefer-dist --no-interaction --ignore-platform-reqs

      - name: Generate API documentation
        working-directory: ./api
        continue-on-error: true
        run: |
          echo "üìö Generating API documentation..."
          cp .env.example .env
          php artisan key:generate --force
          
          if php artisan l5-swagger:generate; then
            echo "‚úÖ API documentation generated successfully"
          else
            echo "‚ö†Ô∏è  API documentation generation failed"
            echo "::warning::API documentation could not be generated"
          fi

  quality-metrics:
    runs-on: ubuntu-latest
    continue-on-error: true
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'
          cache-dependency-path: webapp/yarn.lock

      - name: Install webapp dependencies
        working-directory: ./webapp
        run: yarn install --frozen-lockfile --prefer-offline

      - name: Bundle size analysis
        working-directory: ./webapp
        continue-on-error: true
        run: |
          echo "üìä Analyzing bundle size..."
          yarn build
          
          BUNDLE_SIZE_BYTES=$(du -sb dist | cut -f1)
          BUNDLE_SIZE_MB=$((BUNDLE_SIZE_BYTES / 1024 / 1024))
          
          echo "Bundle size: ${BUNDLE_SIZE_MB}MB"
          
          if [ $BUNDLE_SIZE_BYTES -gt 10485760 ]; then
            echo "::warning::Bundle size (${BUNDLE_SIZE_MB}MB) is larger than 10MB"
          else
            echo "‚úÖ Bundle size is reasonable (${BUNDLE_SIZE_MB}MB)"
          fi

      - name: Dependency analysis
        continue-on-error: true
        run: |
          echo "üì¶ Analyzing dependencies..."
          
          # Count dependencies
          BACKEND_DEPS=$(jq '.require | length' api/composer.json)
          FRONTEND_DEPS=$(jq '.dependencies | length' webapp/package.json)
          
          echo "Backend dependencies: $BACKEND_DEPS"
          echo "Frontend dependencies: $FRONTEND_DEPS"
          
          if [ $FRONTEND_DEPS -gt 50 ]; then
            echo "::warning::High number of webapp dependencies ($FRONTEND_DEPS)"
          fi

  quality-summary:
    runs-on: ubuntu-latest
    needs: [code-style, documentation, quality-metrics]
    if: always()
    
    steps:
      - name: Quality summary
        run: |
          echo "üé® Code Quality Report"
          echo ""
          echo "Code Style: ${{ needs.code-style.result }}"
          echo "Documentation: ${{ needs.documentation.result }}"  
          echo "Quality Metrics: ${{ needs.quality-metrics.result }}"
          echo ""
          echo "‚ÑπÔ∏è  These checks are informational and do not block deployment."