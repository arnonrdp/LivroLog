name: Simple Dev Deploy

on:
  workflow_dispatch:
  push:
    branches: [dev]

jobs:
  deploy:
    name: deploy-dev-fast
    runs-on: ubuntu-latest
    env:
      ENVIRONMENT: Development
      DEPLOY_PATH: /var/www/livrolog-dev
      GHCR_PAT: ${{ secrets.GHCR_PAT }}
      APP_KEY: ${{ secrets.APP_KEY }}
      TARGET_BRANCH: dev
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Deploy development containers
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          envs: GHCR_PAT,GITHUB_SHA,GITHUB_REF_NAME,APP_KEY,TARGET_BRANCH
          command_timeout: 10m
          script: |
            set -euo pipefail +x
            DOCKER_DIR="/var/www/livrolog-dev/docker"
            
            echo "🚀 Starting simple development deployment"
            echo "Using MySQL + Redis containers"
            
            # Create directories
            sudo mkdir -p "$DOCKER_DIR"
            sudo mkdir -p /var/www/livrolog-dev/shared/{storage,db}
            sudo chown -R 999:999 /var/www/livrolog-dev/shared/db
            sudo chown -R "$USER:$USER" /var/www/livrolog-dev
            cd "$DOCKER_DIR"
            
            # Create minimal .env for host applications to connect to containerized databases
            cat > /var/www/livrolog-dev/shared/.env.dev << ENVEOF
            APP_NAME=LivroLog
            APP_ENV=development
            APP_DEBUG=true
            APP_KEY=base64:$(head -c 32 /dev/urandom | base64 | tr -d '\n')
            DB_CONNECTION=mysql
            DB_HOST=127.0.0.1
            DB_PORT=3307
            DB_DATABASE=livrolog_dev
            DB_USERNAME=livrolog
            DB_PASSWORD=supersecret
            REDIS_HOST=127.0.0.1
            REDIS_PORT=6380
            ENVEOF
            
            # Create simple compose file - ONLY MySQL and Redis
            cat > docker-compose.dev.yml << EOF
            name: livrolog_dev
            services:
              mysql:
                image: mysql:8.0
                container_name: livrolog-mysql-dev
                restart: always
                environment:
                  MYSQL_ROOT_PASSWORD: supersecret
                  MYSQL_DATABASE: livrolog_dev
                  MYSQL_USER: livrolog
                  MYSQL_PASSWORD: supersecret
                ports:
                  - "127.0.0.1:3307:3306"
                volumes:
                  - /var/www/livrolog-dev/shared/db:/var/lib/mysql
                networks:
                  - dev-net
                healthcheck:
                  test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-psupersecret"]
                  interval: 5s
                  timeout: 3s
                  retries: 12
                  start_period: 20s
              redis:
                image: redis:7-alpine
                container_name: livrolog-redis-dev
                restart: always
                ports:
                  - "127.0.0.1:6380:6379"
                networks:
                  - dev-net
                healthcheck:
                  test: ["CMD", "redis-cli", "ping"]
                  interval: 3s
                  timeout: 2s
                  retries: 10
                  start_period: 5s
            networks:
              dev-net:
                name: livrolog-dev-net
                driver: bridge
            EOF
            
            # Clean up and deploy database containers only
            docker compose -f docker-compose.dev.yml down --remove-orphans 2>/dev/null || true
            docker compose -f docker-compose.dev.yml pull
            docker compose -f docker-compose.dev.yml up -d
            
            # Quick health check - finish before SSH timeout
            echo "Checking database services..."
            sleep 10  # Give containers time to start
            
            # Quick verification - only wait 15 seconds max
            for i in {1..3}; do
              mysql_ok=0
              redis_ok=0
              
              # Check if containers are running
              if docker ps | grep -q livrolog-mysql-dev; then mysql_ok=1; fi
              if docker ps | grep -q livrolog-redis-dev; then redis_ok=1; fi
              
              echo "Attempt $i: MySQL container: $mysql_ok, Redis container: $redis_ok"
              
              if [ $mysql_ok -eq 1 ] && [ $redis_ok -eq 1 ]; then
                echo "✅ Database containers deployed successfully"
                echo "💾 MySQL: localhost:3307 (user: livrolog, password: supersecret, database: livrolog_dev)"
                echo "🔴 Redis: localhost:6380"
                echo "📂 Storage: /var/www/livrolog-dev/shared/storage"
                echo "🎉 Database-only deployment completed successfully!"
                exit 0
              fi
              
              sleep 5
            done
            
            echo "⚠️ Containers deployed but may still be initializing"
            echo "💾 MySQL: localhost:3307, Redis: localhost:6380"
            echo "🎯 Check 'docker ps' on server to verify containers are running"
            exit 0