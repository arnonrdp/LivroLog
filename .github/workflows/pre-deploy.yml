name: Full Pre-Deploy Checks

on:
  # Only run full checks on staging pushes and main PRs
  pull_request:
    branches:
      - main
  push:
    branches:
      - staging
  # Manual trigger for comprehensive testing
  workflow_dispatch:

jobs:
  # Run all quality checks in parallel for faster feedback
  backend-quality:
    uses: ./.github/workflows/backend-quality.yml

  frontend-quality:
    uses: ./.github/workflows/frontend-quality.yml

  security:
    uses: ./.github/workflows/security.yml

  tests:
    uses: ./.github/workflows/tests.yml

  # Final validation step that runs after all checks pass
  deploy-readiness:
    runs-on: ubuntu-latest
    needs: [backend-quality, frontend-quality, security, tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.4
          extensions: mbstring, xml, ctype, iconv, intl, pdo, zip
          tools: composer:v2

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'
          cache-dependency-path: webapp/yarn.lock

      # Verify Docker builds work
      - name: Test Docker build - API
        run: |
          cd api
          if [ -f "Dockerfile" ] || [ -f "docker/Dockerfile" ]; then
            echo "Testing Docker build for API..."
            docker build -f docker/Dockerfile -t livrolog-api-test . || echo "::warning::API Docker build failed"
          else
            echo "::warning::No Dockerfile found for API"
          fi

      - name: Test Docker build - Webapp  
        run: |
          cd webapp
          if [ -f "Dockerfile" ]; then
            echo "Testing Docker build for webapp..."
            docker build -t livrolog-webapp-test . || echo "::warning::Webapp Docker build failed"
          else
            echo "::warning::No Dockerfile found for webapp"
          fi

      # Environment validation
      - name: Validate environment configuration
        working-directory: ./api
        run: |
          composer install --prefer-dist --no-interaction --optimize-autoloader
          cp .env.example .env
          php artisan key:generate
          
          # Test configuration loading
          php artisan config:cache
          php artisan config:clear
          
          echo "‚úÖ Environment configuration is valid"

      # Final readiness check
      - name: Deploy readiness summary
        run: |
          echo "üöÄ Pre-deploy checks completed successfully!"
          echo ""
          echo "‚úÖ Backend code quality"
          echo "‚úÖ Frontend code quality"  
          echo "‚úÖ Security checks"
          echo "‚úÖ Test suite"
          echo "‚úÖ Docker builds"
          echo "‚úÖ Environment configuration"
          echo ""
          echo "The application is ready for deployment! üéâ"

  # Notify on failure
  notify-failure:
    runs-on: ubuntu-latest
    needs: [backend-quality, frontend-quality, security, tests, deploy-readiness]
    if: failure()
    
    steps:
      - name: Deployment blocked
        run: |
          echo "‚ùå Pre-deploy checks failed!"
          echo ""
          echo "Deployment has been blocked due to failing checks."
          echo "Please review the failed jobs above and fix the issues."
          echo ""
          echo "Common issues:"
          echo "- Code style violations (run 'composer pint' or 'yarn lint --fix')"
          echo "- Type errors (run 'yarn type-check')"
          echo "- Test failures (run 'php artisan test' or add missing tests)"
          echo "- Security vulnerabilities (update dependencies)"
          exit 1