name: Deploy

on:
  push:
    branches:
      - main
      - dev
  workflow_dispatch:

env:
  PHP_VERSION: '8.3'
  NODE_VERSION: '20'

jobs:
  required-checks:
    uses: ./.github/workflows/required-checks.yml

  build:
    needs: required-checks
    uses: ./.github/workflows/build.yml
    with:
      environment: ${{ github.ref == 'refs/heads/main' && 'Production' || 'Development' }}
    secrets: inherit

  deploy:
    name: deploy
    runs-on: ubuntu-latest
    needs: [required-checks, build]
    if: always() && needs.build.result == 'success'

    env:
      TIMESTAMP: ${{ github.run_number }}-${{ github.sha }}
      ENVIRONMENT: ${{ github.ref == 'refs/heads/main' && 'Production' || 'Development' }}
      DEPLOY_PATH: ${{ github.ref == 'refs/heads/main' && '/var/www/livrolog' || '/var/www/livrolog-dev' }}
      SHARED_ENV: ${{ github.ref == 'refs/heads/main' && '.env' || '.env.dev' }}

    steps:
      - name: Set environment variables
        run: |
          if [[ "${{ env.ENVIRONMENT }}" == "Production" ]]; then
            echo "API_URL=api.livrolog.com" >> $GITHUB_ENV
            echo "WEB_URL=livrolog.com" >> $GITHUB_ENV
          else
            echo "API_URL=api.dev.livrolog.com" >> $GITHUB_ENV
            echo "WEB_URL=dev.livrolog.com" >> $GITHUB_ENV
          fi

      - name: Download API artifact
        uses: actions/download-artifact@v4
        with:
          name: api-build-${{ github.sha }}

      - name: Download webapp artifact
        uses: actions/download-artifact@v4
        with:
          name: webapp-build-${{ github.sha }}

      - name: Prepare release directory
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            RELEASE_DIR="${{ env.DEPLOY_PATH }}/releases/${{ env.TIMESTAMP }}"
            mkdir -p $RELEASE_DIR/{api,webapp}

            # Create base directories for dev if needed
            if [[ "${{ env.ENVIRONMENT }}" == "Development" ]]; then
              sudo mkdir -p ${{ env.DEPLOY_PATH }}/{releases,shared/storage}
              sudo chown -R bitnami:daemon ${{ env.DEPLOY_PATH }}
            fi

      - name: Deploy API
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: 'api-build.tar.gz'
          target: '/tmp/'

      - name: Deploy webapp
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: 'webapp-build.tar.gz'
          target: '/tmp/'

      - name: Setup application
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            set -e
            RELEASE_DIR="${{ env.DEPLOY_PATH }}/releases/${{ env.TIMESTAMP }}"

            # Extract API
            cd $RELEASE_DIR/api
            tar -xzf /tmp/api-build.tar.gz --strip-components=0
            rm /tmp/api-build.tar.gz
            
            # Setup API symlinks
            ln -nfs ${{ env.DEPLOY_PATH }}/shared/${{ env.SHARED_ENV }} .env
            rm -rf storage
            ln -nfs ${{ env.DEPLOY_PATH }}/shared/storage storage

            # Extract webapp
            cd $RELEASE_DIR/webapp
            tar -xzf /tmp/webapp-build.tar.gz --strip-components=1
            rm /tmp/webapp-build.tar.gz

            # Set permissions
            sudo chown -R bitnami:daemon $RELEASE_DIR
            chmod -R 755 $RELEASE_DIR

            echo "✅ Application setup completed"

      - name: Run migrations
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            set -e
            RELEASE_DIR="${{ env.DEPLOY_PATH }}/releases/${{ env.TIMESTAMP }}"

            echo "🔄 Running database migrations..."
            cd $RELEASE_DIR/api

            # Clear Laravel caches to avoid permission conflicts
            php artisan cache:clear || true
            php artisan view:clear || true
            php artisan config:clear || true

            # Ensure shared storage directories exist with proper permissions
            sudo mkdir -p ${{ env.DEPLOY_PATH }}/shared/storage/{app,framework/{cache,sessions,testing,views},logs}

            # Set ownership first, then permissions on shared storage
            sudo chown -R bitnami:daemon ${{ env.DEPLOY_PATH }}/shared/storage
            sudo chmod -R 775 ${{ env.DEPLOY_PATH }}/shared/storage

            # Remove existing cache and session files from shared storage
            rm -rf ${{ env.DEPLOY_PATH }}/shared/storage/framework/sessions/* || true
            rm -rf ${{ env.DEPLOY_PATH }}/shared/storage/framework/views/* || true
            rm -rf ${{ env.DEPLOY_PATH }}/shared/storage/framework/cache/* || true

            # Test migration first
            php artisan migrate:status
            php artisan migrate --force --no-interaction

            echo "✅ Migrations completed successfully"

      - name: Switch to new release
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            set -e
            RELEASE_DIR="${{ env.DEPLOY_PATH }}/releases/${{ env.TIMESTAMP }}"

            # Atomic switch
            ln -nfs $RELEASE_DIR ${{ env.DEPLOY_PATH }}/current

            # Clear caches and regenerate
            cd ${{ env.DEPLOY_PATH }}/current/api
            php artisan config:clear
            php artisan cache:clear
            php artisan books:cache-clear
            php artisan config:cache
            php artisan route:cache
            php artisan view:cache || true
            
            # Regenerate Swagger documentation
            php artisan l5-swagger:generate

            # Restart services
            sudo /opt/bitnami/ctlscript.sh restart apache
            sudo /opt/bitnami/ctlscript.sh restart php-fpm

            # Cleanup old releases (keep last 3)
            cd ${{ env.DEPLOY_PATH }}/releases
            ls -t | tail -n +4 | xargs -r rm -rf

            echo "🚀 Deployment switched successfully!"

  post-deploy:
    name: post-deploy
    needs: [deploy]
    uses: ./.github/workflows/post-deploy.yml
    with:
      environment: ${{ github.ref == 'refs/heads/main' && 'Production' || 'Development' }}
    secrets: inherit

  rollback:
    name: rollback
    runs-on: ubuntu-latest
    if: failure() && github.event_name != 'workflow_dispatch'
    needs: [deploy]

    steps:
      - name: Automatic rollback
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            set -e
            echo "🔄 Performing automatic rollback due to deployment failure..."

            # Determine environment from branch
            if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
              ENVIRONMENT="Production"
            else
              ENVIRONMENT="Development"
            fi

            if [[ "$ENVIRONMENT" == "Production" ]]; then
              DEPLOY_PATH="/var/www/livrolog"
              API_URL="api.livrolog.com"
              WEB_URL="livrolog.com"
            else
              DEPLOY_PATH="/var/www/livrolog-dev"
              API_URL="api.dev.livrolog.com"
              WEB_URL="dev.livrolog.com"
            fi

            echo "Rollback environment: $ENVIRONMENT"
            echo "Deploy path: $DEPLOY_PATH"

            # Get previous release
            PREVIOUS=$(ls -t $DEPLOY_PATH/releases 2>/dev/null | sed -n '2p')

            if [[ -n "$PREVIOUS" && -d "$DEPLOY_PATH/releases/$PREVIOUS" ]]; then
              echo "Rolling back to previous release: $PREVIOUS"
              
              # Atomic switch to previous release
              ln -nfs $DEPLOY_PATH/releases/$PREVIOUS $DEPLOY_PATH/current
              
              # Restart services
              sudo /opt/bitnami/ctlscript.sh restart apache
              sudo /opt/bitnami/ctlscript.sh restart php-fpm
              
              # Wait for services to restart
              sleep 5
              
              
              # Remove failed release
              FAILED_RELEASE="${{ github.run_number }}-${{ github.sha }}"
              if [[ -d "$DEPLOY_PATH/releases/$FAILED_RELEASE" ]]; then
                echo "🗑️  Removing failed release: $FAILED_RELEASE"
                rm -rf "$DEPLOY_PATH/releases/$FAILED_RELEASE"
              fi
              
              echo "✅ Rollback to $PREVIOUS completed successfully"
              echo "🚨 Deployment failed and was automatically rolled back!"
              
            else
              echo "❌ No previous release found for rollback"
              echo "Available releases:"
              ls -la $DEPLOY_PATH/releases/ 2>/dev/null || echo "No releases directory found"
              exit 1
            fi

  # Canary deployment for Docker containers (optional)
  # Comments in English only
  docker-canary-dev:
    name: docker-canary-dev
    runs-on: ubuntu-latest
    needs: [required-checks, build]
    if: always() && needs.build.result == 'success' && github.ref == 'refs/heads/dev'
    
    env:
      ENVIRONMENT: Development
      DEPLOY_PATH: /var/www/livrolog-dev
    
    steps:
      - name: Deploy canary containers (livrolog-dev)
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            set -e
            
            # Install Docker if not present
            if ! command -v docker &> /dev/null; then
              echo "Installing Docker..."
              curl -fsSL https://get.docker.com -o get-docker.sh
              sudo sh get-docker.sh
              sudo usermod -aG docker $USER
            fi
            
            # Create Docker deployment directory
            DOCKER_DIR="/srv/livrolog"
            mkdir -p $DOCKER_DIR
            cd $DOCKER_DIR
            
            # Create dev compose file
            cat > docker-compose.dev.yml << 'EOF'
            name: livrolog_dev
            services:
              web:
                image: ghcr.io/${GITHUB_REPOSITORY_OWNER}/livrolog-web:${TAG}
                container_name: livrolog-web-dev
                restart: always
                ports:
                  - "8081:80"
                healthcheck:
                  test: ["CMD", "curl", "-fsS", "http://localhost/healthz"]
                  interval: 15s
                  timeout: 3s
                  retries: 10
                depends_on:
                  api:
                    condition: service_healthy
              api:
                image: ghcr.io/${GITHUB_REPOSITORY_OWNER}/livrolog-api:${TAG}
                container_name: livrolog-api-dev
                restart: always
                env_file:
                  - /var/www/livrolog-dev/shared/.env.dev
                environment:
                  - DB_HOST=127.0.0.1
                  - DB_PORT=3306
                  - DB_DATABASE=livrolog_dev
                  - REDIS_HOST=127.0.0.1
                  - REDIS_PORT=6379
                network_mode: host
                volumes:
                  - /var/www/livrolog-dev/shared/storage:/var/www/html/storage
                healthcheck:
                  test: ["CMD", "curl", "-fsS", "http://localhost:8000/healthz"]
                  interval: 15s
                  timeout: 3s
                  retries: 10
            EOF
            
            # Set environment variables for Docker Compose
            export GITHUB_REPOSITORY_OWNER=${{ github.repository_owner }}
            export TAG=${{ github.sha }} # Use immutable SHA tag
            
            # Log in to GHCR
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin
            
            # Store current tag for rollback
            echo ${{ github.sha }} > .last_tag_dev
            
            # Pull and start services
            echo "Pulling Docker images..."
            docker compose -p livrolog_dev -f docker-compose.dev.yml pull
            
            echo "Starting Docker services..."
            docker compose -p livrolog_dev -f docker-compose.dev.yml up -d --remove-orphans
            
            # Wait for health checks with rollback on failure
            echo "Waiting for services to be healthy..."
            if ! timeout 120 bash -c 'until docker compose -p livrolog_dev -f docker-compose.dev.yml ps --format json | jq -e ".[] | select(.Health == \"healthy\")" > /dev/null 2>&1; do sleep 5; done'; then
              echo "❌ Health checks failed, rolling back..."
              LAST_TAG=$(cat .last_tag_dev 2>/dev/null || echo "dev")
              export TAG=$LAST_TAG
              docker compose -p livrolog_dev -f docker-compose.dev.yml pull
              docker compose -p livrolog_dev -f docker-compose.dev.yml up -d --remove-orphans
              exit 1
            fi
            
            # Run migrations and clear caches
            echo "Running migrations..."
            docker exec livrolog-api-dev php artisan migrate --force
            docker exec livrolog-api-dev php artisan config:clear
            docker exec livrolog-api-dev php artisan cache:clear
            
            echo "✅ Canary Docker deployment completed successfully!"
            echo "🐳 Containers are running at http://$(hostname -I | awk '{print $1}'):8081"

  docker-canary-prod:
    name: docker-canary-prod
    runs-on: ubuntu-latest
    needs: [required-checks, build]
    if: always() && needs.build.result == 'success' && github.ref == 'refs/heads/main'
    
    env:
      ENVIRONMENT: Production
      DEPLOY_PATH: /var/www/livrolog
    
    steps:
      - name: Deploy canary containers (livrolog production)
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            set -e
            
            DOCKER_DIR="/srv/livrolog"
            mkdir -p $DOCKER_DIR
            cd $DOCKER_DIR
            
            # Create production compose file
            cat > docker-compose.prod.yml << 'EOF'
            name: livrolog
            services:
              web:
                image: ghcr.io/${GITHUB_REPOSITORY_OWNER}/livrolog-web:${TAG}
                container_name: livrolog-web
                restart: always
                ports:
                  - "8080:80"
                healthcheck:
                  test: ["CMD", "curl", "-fsS", "http://localhost/healthz"]
                  interval: 15s
                  timeout: 3s
                  retries: 10
                depends_on:
                  api:
                    condition: service_healthy
              api:
                image: ghcr.io/${GITHUB_REPOSITORY_OWNER}/livrolog-api:${TAG}
                container_name: livrolog-api
                restart: always
                env_file:
                  - /var/www/livrolog/shared/.env
                environment:
                  - DB_HOST=127.0.0.1
                  - DB_PORT=3306
                  - REDIS_HOST=127.0.0.1
                  - REDIS_PORT=6379
                network_mode: host
                volumes:
                  - /var/www/livrolog/shared/storage:/var/www/html/storage
                healthcheck:
                  test: ["CMD", "curl", "-fsS", "http://localhost:8000/healthz"]
                  interval: 15s
                  timeout: 3s
                  retries: 10
            EOF
            
            export GITHUB_REPOSITORY_OWNER=${{ github.repository_owner }}
            export TAG=${{ github.sha }}
            
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin
            
            echo ${{ github.sha }} > .last_tag_prod
            
            docker compose -p livrolog -f docker-compose.prod.yml pull
            docker compose -p livrolog -f docker-compose.prod.yml up -d --remove-orphans
            
            if ! timeout 120 bash -c 'until docker compose -p livrolog -f docker-compose.prod.yml ps --format json | jq -e ".[] | select(.Health == \"healthy\")" > /dev/null 2>&1; do sleep 5; done'; then
              echo "❌ Production health checks failed, rolling back..."
              LAST_TAG=$(cat .last_tag_prod 2>/dev/null || echo "prod")
              export TAG=$LAST_TAG
              docker compose -p livrolog -f docker-compose.prod.yml pull
              docker compose -p livrolog -f docker-compose.prod.yml up -d --remove-orphans
              exit 1
            fi
            
            docker exec livrolog-api php artisan migrate --force
            docker exec livrolog-api php artisan config:clear
            docker exec livrolog-api php artisan cache:clear
            
            echo "✅ Production Docker deployment completed successfully!"
            echo "🐳 Containers are running at http://$(hostname -I | awk '{print $1}'):8080"
