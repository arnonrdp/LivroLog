name: Deploy

on:
  push:
    branches:
      - main
      - dev
  workflow_dispatch:

env:
  PHP_VERSION: '8.3'
  NODE_VERSION: '20'

jobs:
  required-checks:
    uses: ./.github/workflows/required-checks.yml

  detect-changes:
    needs: required-checks
    runs-on: ubuntu-latest
    outputs:
      api-changed: ${{ steps.changes.outputs.api }}
      webapp-changed: ${{ steps.changes.outputs.webapp }}
      environment: ${{ steps.env.outputs.environment }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
          ref: ${{ github.ref }}

      - name: Detect file changes
        id: changes
        uses: dorny/paths-filter@v3
        with:
          filters: |
            api:
              - 'api/**'
            webapp:
              - 'webapp/**'

      - name: Set environment
        id: env
        run: |
          # Determine environment from the current branch
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=Production" >> $GITHUB_OUTPUT
          else
            echo "environment=Development" >> $GITHUB_OUTPUT
          fi

  build:
    needs: detect-changes
    uses: ./.github/workflows/build.yml
    with:
      api-changed: ${{ needs.detect-changes.outputs.api-changed }}
      webapp-changed: ${{ needs.detect-changes.outputs.webapp-changed }}
      environment: ${{ needs.detect-changes.outputs.environment }}
    secrets: inherit

  deploy:
    runs-on: ubuntu-latest
    needs: [detect-changes, build]
    if: always() && needs.build.result == 'success'

    env:
      TIMESTAMP: ${{ github.run_number }}-${{ github.sha }}
      ENVIRONMENT: ${{ needs.detect-changes.outputs.environment }}

    steps:
      - name: Set environment variables
        run: |
          if [[ "${{ env.ENVIRONMENT }}" == "Production" ]]; then
            echo "API_URL=api.livrolog.com" >> $GITHUB_ENV
            echo "WEB_URL=livrolog.com" >> $GITHUB_ENV
            echo "DEPLOY_PATH=/var/www/livrolog" >> $GITHUB_ENV
            echo "SHARED_ENV=.env" >> $GITHUB_ENV
          else
            echo "API_URL=api.dev.livrolog.com" >> $GITHUB_ENV
            echo "WEB_URL=dev.livrolog.com" >> $GITHUB_ENV
            echo "DEPLOY_PATH=/var/www/livrolog-dev" >> $GITHUB_ENV
            echo "SHARED_ENV=.env.dev" >> $GITHUB_ENV
          fi

      - name: Download API artifact
        if: needs.detect-changes.outputs.api-changed == 'true' || github.event_name == 'workflow_dispatch'
        uses: actions/download-artifact@v4
        with:
          name: api-build-${{ github.sha }}

      - name: Download webapp artifact
        if: needs.detect-changes.outputs.webapp-changed == 'true' || github.event_name == 'workflow_dispatch'
        uses: actions/download-artifact@v4
        with:
          name: webapp-build-${{ github.sha }}

      - name: Prepare release directory
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            RELEASE_DIR="${{ env.DEPLOY_PATH }}/releases/${{ env.TIMESTAMP }}"
            mkdir -p $RELEASE_DIR/{api,webapp}

            # Create base directories for dev if needed
            if [[ "${{ env.ENVIRONMENT }}" == "Development" ]]; then
              sudo mkdir -p ${{ env.DEPLOY_PATH }}/{releases,shared/storage}
              sudo chown -R bitnami:daemon ${{ env.DEPLOY_PATH }}
            fi

      - name: Deploy API (if changed)
        if: needs.detect-changes.outputs.api-changed == 'true' || github.event_name == 'workflow_dispatch'
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: 'api-build.tar.gz'
          target: '/tmp/'

      - name: Deploy webapp (if changed)
        if: needs.detect-changes.outputs.webapp-changed == 'true' || github.event_name == 'workflow_dispatch'
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: 'webapp-build.tar.gz'
          target: '/tmp/'

      - name: Setup application
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            set -e
            RELEASE_DIR="${{ env.DEPLOY_PATH }}/releases/${{ env.TIMESTAMP }}"

            # Extract API if changed
            if [[ "${{ needs.detect-changes.outputs.api-changed }}" == "true" || "${{ github.event_name }}" == "workflow_dispatch" ]]; then
              cd $RELEASE_DIR/api
              tar -xzf /tmp/api-build.tar.gz --strip-components=0
              rm /tmp/api-build.tar.gz
              
              # Setup symlinks
              ln -nfs ${{ env.DEPLOY_PATH }}/shared/${{ env.SHARED_ENV }} .env
              rm -rf storage
              ln -nfs ${{ env.DEPLOY_PATH }}/shared/storage storage
            else
              # Copy current API if no changes
              if [[ -d "${{ env.DEPLOY_PATH }}/current/api" ]]; then
                cp -r ${{ env.DEPLOY_PATH }}/current/api/* $RELEASE_DIR/api/
              fi
            fi

            # Extract webapp if changed  
            if [[ "${{ needs.detect-changes.outputs.webapp-changed }}" == "true" || "${{ github.event_name }}" == "workflow_dispatch" ]]; then
              cd $RELEASE_DIR/webapp
              tar -xzf /tmp/webapp-build.tar.gz --strip-components=1
              rm /tmp/webapp-build.tar.gz
            else
              # Copy current webapp if no changes
              if [[ -d "${{ env.DEPLOY_PATH }}/current/webapp" ]]; then
                cp -r ${{ env.DEPLOY_PATH }}/current/webapp/* $RELEASE_DIR/webapp/
              fi
            fi

            # Set permissions
            sudo chown -R bitnami:daemon $RELEASE_DIR
            chmod -R 755 $RELEASE_DIR

            echo "‚úÖ Application setup completed"

      - name: Run migrations (Production only)
        if: env.ENVIRONMENT == 'Production' && (needs.detect-changes.outputs.api-changed == 'true' || github.event_name == 'workflow_dispatch')
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            set -e
            RELEASE_DIR="${{ env.DEPLOY_PATH }}/releases/${{ env.TIMESTAMP }}"

            echo "üîÑ Running database migrations..."
            cd $RELEASE_DIR/api

            # Ensure storage directories exist with proper permissions
            mkdir -p storage/{app,framework/{cache,sessions,testing,views},logs}
            sudo chown -R bitnami:daemon storage
            chmod -R 775 storage

            # Test migration first
            php artisan migrate:status
            php artisan migrate --force --no-interaction

            echo "‚úÖ Migrations completed successfully"

      - name: Switch to new release
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            set -e
            RELEASE_DIR="${{ env.DEPLOY_PATH }}/releases/${{ env.TIMESTAMP }}"

            # Atomic switch
            ln -nfs $RELEASE_DIR ${{ env.DEPLOY_PATH }}/current

            # Clear caches and regenerate
            if [[ "${{ needs.detect-changes.outputs.api-changed }}" == "true" || "${{ github.event_name }}" == "workflow_dispatch" ]]; then
              cd ${{ env.DEPLOY_PATH }}/current/api
              php artisan config:clear
              php artisan cache:clear
              php artisan config:cache
              php artisan route:cache
              php artisan view:cache || true
              
              # Regenerate Swagger documentation
              php artisan l5-swagger:generate
            fi

            # Restart services
            sudo /opt/bitnami/ctlscript.sh restart apache
            sudo /opt/bitnami/ctlscript.sh restart php-fpm

            # Cleanup old releases (keep last 3)
            cd ${{ env.DEPLOY_PATH }}/releases
            ls -t | tail -n +4 | xargs -r rm -rf

            echo "üöÄ Deployment switched successfully!"

      - name: Verify deployment
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            echo "üîç Quick health checks..."

            # Parallel health checks
            API_STATUS=$(timeout 10 curl -s -o /dev/null -w "%{http_code}" http://${{ env.API_URL }}/api/health 2>/dev/null || echo "000") &
            WEB_STATUS=$(timeout 10 curl -s -o /dev/null -w "%{http_code}" http://${{ env.WEB_URL }} 2>/dev/null || echo "000") &

            wait

            if [[ "$API_STATUS" == "200" ]]; then
              echo "‚úÖ API health check passed"
            else
              echo "‚ö†Ô∏è  API health check failed (status: $API_STATUS)"
            fi

            if [[ "$WEB_STATUS" != "000" && "$WEB_STATUS" != "404" ]]; then
              echo "‚úÖ Web application is responding (status: $WEB_STATUS)"
            else
              echo "‚ö†Ô∏è  Web application check failed (status: $WEB_STATUS)"
            fi

            echo "üéâ Deployment completed!"

  post-deploy:
    needs: [detect-changes, deploy]
    uses: ./.github/workflows/post-deploy.yml
    with:
      environment: ${{ needs.detect-changes.outputs.environment }}
    secrets: inherit

  rollback:
    runs-on: ubuntu-latest
    if: failure() && github.event_name != 'workflow_dispatch'
    needs: [detect-changes, deploy]

    steps:
      - name: Automatic rollback
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            echo "üîÑ Performing automatic rollback..."

            # Determine environment from branch or output
            ENVIRONMENT="${{ needs.detect-changes.outputs.environment }}"
            if [[ -z "$ENVIRONMENT" ]]; then
              # Fallback: detect from branch
              if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
                ENVIRONMENT="Production"
              else
                ENVIRONMENT="Development"
              fi
            fi

            if [[ "$ENVIRONMENT" == "Production" ]]; then
              DEPLOY_PATH="/var/www/livrolog"
            else
              DEPLOY_PATH="/var/www/livrolog-dev"
            fi

            echo "Rollback environment: $ENVIRONMENT"

            # Get previous release
            PREVIOUS=$(ls -t $DEPLOY_PATH/releases | sed -n '2p')

            if [[ -n "$PREVIOUS" ]]; then
              ln -nfs $DEPLOY_PATH/releases/$PREVIOUS $DEPLOY_PATH/current
              sudo /opt/bitnami/ctlscript.sh restart apache
              sudo /opt/bitnami/ctlscript.sh restart php-fpm
              echo "‚úÖ Rollback to $PREVIOUS completed"
            else
              echo "‚ùå No previous release found for rollback"
              exit 1
            fi
