name: Deploy LivroLog

on:
  push:
    branches:
      - main
      - dev
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - production

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set environment variables
        run: |
          # Check if triggered manually
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            if [[ "${{ github.event.inputs.environment }}" == "production" ]]; then
              echo "DEPLOY_ENV=production" >> $GITHUB_ENV
              echo "API_URL=api.livrolog.com" >> $GITHUB_ENV
              echo "WEB_URL=livrolog.com" >> $GITHUB_ENV
              echo "DEPLOY_PATH=/var/www/livrolog/releases" >> $GITHUB_ENV
            else
              echo "DEPLOY_ENV=development" >> $GITHUB_ENV
              echo "API_URL=api.dev.livrolog.com" >> $GITHUB_ENV
              echo "WEB_URL=dev.livrolog.com" >> $GITHUB_ENV
              echo "DEPLOY_PATH=/var/www/livrolog-dev/releases" >> $GITHUB_ENV
            fi
          # Check branch for automatic deployment
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "DEPLOY_ENV=production" >> $GITHUB_ENV
            echo "API_URL=api.livrolog.com" >> $GITHUB_ENV
            echo "WEB_URL=livrolog.com" >> $GITHUB_ENV
            echo "DEPLOY_PATH=/var/www/livrolog/releases" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
            echo "DEPLOY_ENV=development" >> $GITHUB_ENV
            echo "API_URL=api.dev.livrolog.com" >> $GITHUB_ENV
            echo "WEB_URL=dev.livrolog.com" >> $GITHUB_ENV
            echo "DEPLOY_PATH=/var/www/livrolog-dev/releases" >> $GITHUB_ENV
          fi

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_mysql, dom, filter, gd, json, bcmath

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Get Composer Cache Directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install API dependencies
        working-directory: ./api
        run: |
          mkdir -p bootstrap/cache
          chmod -R 775 bootstrap/cache
          composer install --no-dev --optimize-autoloader --no-interaction
          php artisan config:cache
          php artisan route:cache
          php artisan view:cache || true

      - name: Cache Yarn dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/yarn
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: ${{ runner.os }}-yarn-

      - name: Build Frontend
        working-directory: ./webapp
        run: |
          yarn install --frozen-lockfile
          if [[ "${{ env.DEPLOY_ENV }}" == "production" ]]; then
            echo "VITE_API_URL=https://api.livrolog.com" > .env.production
            yarn build --mode production
          else
            echo "VITE_API_URL=http://api.dev.livrolog.com" > .env.development
            yarn build --mode development
          fi
          
          # Create .htaccess for SPA fallback
          cat > dist/.htaccess << 'EOF'
          RewriteEngine On
          RewriteCond %{REQUEST_FILENAME} !-f
          RewriteCond %{REQUEST_FILENAME} !-d
          RewriteRule ^(.*)$ /index.html [L]
          EOF

      - name: Create deployment timestamp
        run: echo "TIMESTAMP=$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            # Create release directory
            RELEASE_DIR="${{ env.DEPLOY_PATH }}/${{ env.TIMESTAMP }}"
            mkdir -p $RELEASE_DIR
            
            # Create base directory if doesn't exist (for dev environment)
            if [[ "${{ env.DEPLOY_ENV }}" == "development" ]]; then
              sudo mkdir -p /var/www/livrolog-dev/{releases,shared}
              sudo chown -R bitnami:daemon /var/www/livrolog-dev
            fi

      - name: Copy API to server
        uses: appleboy/scp-action@v0.1.5
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: "api/"
          target: "${{ env.DEPLOY_PATH }}/${{ env.TIMESTAMP }}"
          strip_components: 0

      - name: Copy Frontend to server
        uses: appleboy/scp-action@v0.1.5
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: "webapp/dist/"
          target: "${{ env.DEPLOY_PATH }}/${{ env.TIMESTAMP }}/webapp/"
          strip_components: 2

      - name: Setup application on server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            RELEASE_DIR="${{ env.DEPLOY_PATH }}/${{ env.TIMESTAMP }}"
            
            # Set correct base path
            if [[ "${{ env.DEPLOY_ENV }}" == "production" ]]; then
              BASE_PATH="/var/www/livrolog"
              ENV_FILE="$BASE_PATH/shared/.env"
            else
              BASE_PATH="/var/www/livrolog-dev"
              ENV_FILE="$BASE_PATH/shared/.env.dev"
            fi
            
            # Create symlink for .env file
            ln -nfs $ENV_FILE $RELEASE_DIR/api/.env
            
            # Create storage symlinks
            rm -rf $RELEASE_DIR/api/storage
            ln -nfs $BASE_PATH/shared/storage $RELEASE_DIR/api/storage
            
            # Set permissions
            sudo chown -R bitnami:daemon $RELEASE_DIR
            chmod -R 755 $RELEASE_DIR
            chmod -R 775 $BASE_PATH/shared/storage
            
            # Run migrations (only for production)
            if [[ "${{ env.DEPLOY_ENV }}" == "production" ]]; then
              cd $RELEASE_DIR/api
              php artisan migrate --force
            fi
            
            # Update symlink to new release
            ln -nfs $RELEASE_DIR $BASE_PATH/current
            
            # Keep only last 5 releases
            cd $BASE_PATH/releases
            ls -t | tail -n +6 | xargs -r rm -rf
            
            # Restart services
            sudo /opt/bitnami/ctlscript.sh restart apache
            sudo /opt/bitnami/ctlscript.sh restart php-fpm
            
            # Clear Laravel caches
            cd $BASE_PATH/current/api
            php artisan config:clear
            php artisan cache:clear
            php artisan config:cache
            php artisan route:cache
            
            echo "Deployment completed successfully!"

      - name: Verify deployment
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            echo "üîç Testing API endpoint..."
            API_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://${{ env.API_URL }}/api/health 2>/dev/null || echo "000")
            echo "API health check returned: $API_STATUS"
            
            if [ "$API_STATUS" = "200" ]; then
              echo "‚úÖ API health check passed"
            else
              echo "‚ö†Ô∏è  API health check failed, testing basic endpoint..."
              BASIC_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://${{ env.API_URL }} 2>/dev/null || echo "000")
              echo "Basic API endpoint returned: $BASIC_STATUS"
              if [ "$BASIC_STATUS" != "000" ]; then
                echo "‚úÖ API is responding (status: $BASIC_STATUS)"
              else
                echo "‚ùå API is not responding"
                exit 1
              fi
            fi
            
            echo "üîç Testing Web application..."
            WEB_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://${{ env.WEB_URL }} 2>/dev/null || echo "000")
            echo "Web application returned: $WEB_STATUS"
            
            if [ "$WEB_STATUS" != "000" ] && [ "$WEB_STATUS" != "404" ]; then
              echo "‚úÖ Web application is responding (status: $WEB_STATUS)"
            else
              echo "‚ùå Web application is not responding"
              exit 1
            fi
            
            echo "üéâ Deployment verification completed successfully!"